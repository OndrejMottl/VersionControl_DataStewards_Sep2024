---
format: 
  revealjs:
    slide-number: true
    theme: [default, custom_theme.scss]
    chalkboard:
      buttons: false
    preview-links: auto
    output-file: "index"
    output-ext: "html"
    code-link: true
---

```{r}
#| label: setup
#| include: false
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
  fig.width = 7,
  fig.height = 5,
  fig.align = "center",
  out.width = "100%",
  output = TRUE
)

if (!require("countdown")) install.packages("countdown")

library(countdown)

if (!require("here")) install.packages("here")

library(here)


if (!require("tidyverse")) install.packages("tidyverse")

library(tidyverse)

if (!require("palmerpenguins")) install.packages("palmerpenguins")

library(palmerpenguins)

include_local_figure <- function(data_source) {
  knitr::include_graphics(
    path = here::here(
      "materials",
      data_source
    ),
    error = TRUE
  )
}
```

# [Reproducibility in Science]{.bold .r-fit-text} {.title}

Ondřej Mottl

## Research cycle

```{r}
#| label: research cycle
include_local_figure("ResearchCycle.jpg")
```

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

## Reproducibility crisis

```{r}
#| label: reprodicibility crisis
include_local_figure("1a.png")
```

::: footer
[Baker, Monya. "1,500 scientists lift the lid on reproducibility." Nature 533, no. 7604 (2016).](https://doi.org/10.1038/533452a)
:::

## Evolution

```{r}
#| label: evolution
include_local_figure("openresearch.jpg")
```

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

## [Practical Exercise]{.r-fit-text} {.exercise .textcenter}

:::{.r-fit-text}
What is Open Science to You?
:::

`r countdown(minutes = 3)`

# Open Science

```{r}
#| label: open-science
include_local_figure("UNESCO-Open_science-pillars-en.png")
```

::: footer
[UNESCO (2022). Understanding open science — Factsheet — SC-PBS-STIP/2022/OST/1.](https://doi.org/10.54677/UTCD9302)
:::

## A better view

```{r}
#| label: open-science-taxonomy
include_local_figure("os_taxonomy.png")
```

::: footer
[https://www.fosteropenscience.eu/](https://www.fosteropenscience.eu/)
:::

## The Journey

```{r}
#| label: open-science-journey
include_local_figure("ReproducibleJourney.jpg")
```

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

# [DATA]{.bold .r-fit-text} {.title}

## FAIR Principles

Good practices for the management and administration of scientific data

:::: columns
::: {.column width="50%"}

```{r}
#| label: FAIR
include_local_figure("FAIRPrinciples.jpg")
```

:::

::: {.column width="50%"}

::: {.textcenter .bold .text-color-highlight-secondary}
"*Access as open as possible, as closed as necessary*"
:::

::: incremental
* [**F**]{.text-color-highlight-primary}indable 
* [**A**]{.text-color-highlight-primary}ccesible 
* [**I**]{.text-color-highlight-primary}nteroperable 
* [**R**]{.text-color-highlight-primary}eusable
:::

:::
::::

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

## Open vs Close

```{r}
#| label: open-vs-close
include_local_figure("open-vs-close-research-with-text.jpg")
```

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

## Sharing Data

Do you generate data and/or software?

:::: columns
::: {.column width="50%" .fragment}

```{r}
#| label: DOI
include_local_figure("DOI.jpg")
```

:::

::: {.column width="50%" .incremental}

* Get a permanent URL to the repository as a [**Digital Object Identifier**]{.text-color-highlight-primary} (DOI)
* Deposit them in a "stable" repository (eg. [Zenodo](https://zenodo.org/), [Figshare](https://figshare.com/), etc)
* Included an example of how to cite it in the [**README**]{.text-color-highlight-secondary} or documentation

:::
::::

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

## Licensing

[ZENODO]{.text-color-highlight-primary} allows you to choose a licence for your data.

You can always share your private data and [**restricted access**]{.text-color-highlight-secondary} with the correct licence.

There are websites e.g. [https://choosealicense.com/](https://choosealicense.com/) to help on choosing a licence.

```{r}
#| label: licensing
knitr::include_graphics("https://howtofair.dk/media/vkynh5av/examples-of-data-licences.png")
```

::: footer
[How to  FAIR](https://howtofair.dk/how-to-fair/data-licences/)
:::

## Data stewards

```{r}
#| label: DataStewards
include_local_figure("DataStewards.jpg")
```

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

# [CODE]{.bold .r-fit-text} {.title}

## Reproducibility ?

::::: {.columns}

:::: {.column width="60%"}

```{r}
#| label: meme-work-on-my-machine
knitr::include_graphics("https://media.makeameme.org/created/one-does-not-50b8331726.jpg")
```

::::

:::: {.column width="40%"}

<br>

Uknown author

::: {.blockquote .textcenter}

I was able to reproduce my results on [my computer/machine]{.text-color-highlight-secondary}

Can I consider my work [**reproducible**]{.text-color-highlight-tertiary}?

:::
::::
:::::

::: footer
[makeameme.org](https://media.makeameme.org/created/one-does-not-50b8331726)
:::

## Reproducibility

```{r}
#| label: reproducibility
include_local_figure("ReproducibleDefinitionGrid.jpg")
```

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

## Time to change

```{r}
#| label: culture-shift
include_local_figure("CultureShift.jpg")
```

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

## It is a spectrum

```{r}
#| label: rep-spectrum
knitr::include_graphics("https://raps-with-r.dev/images/repro_spectrum.png")
```

:::{.footer}
[Roger D. Peng ,Reproducible Research in Computational Science.Science334,1226-1227(2011).DOI:10.1126/science.1213847](https://doi.org/10.1126/science.1213847)
:::

## [Practical Exercise]{.r-fit-text} {.exercise .textcenter}

:::{.r-fit-text}
How reproducible is your research?

What can you do to improve it?
:::

`r countdown(minutes = 3)`

## It is a spectrum

```{r}
#| label: rep-spectrum-details
knitr::include_graphics("https://www.aalto.fi/sites/g/files/flghsv161/files/styles/o_914w_ah_n_nu/public/2022-02/Glerean_continuum_best_practices1800.png")
```

::: footer
[Getting started with reproducibility in research!](https://www.aalto.fi/en/open-science-and-research/getting-started-with-reproducibility-in-research)
:::

# [PROJECTS]{.bold .r-fit-text} {.title}

## Making a paper (compendium)

:::: columns
::: {.column width="60%"}

```{r}
#| label: compendium
include_local_figure("ResearchCompendium.jpg")
```

:::

::: {.column width="40%" .textcenter}

<br>
<br>

**[Project]{.text-color-highlight-primary}**-oriented structure

Each paper is a single project

:::
::::

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

## Project communication plan

```{r}
#| label: project-communication-projects
knitr::include_graphics("https://plan.io/images/blog/project-communication-plan.png?1722938254")
```

::: footer
[Plan.io](https://plan.io/blog/)
:::

## Project structure

```{r}
#| label: file-management
include_local_figure("file-management-manual-with-text.jpg")
```

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

## Project structure - basic {auto-animate="true"}

```{r}
#| eval: false
#| echo: true
# .
# └─my_awesome_project/
#   ├─ Data/
#   ├─ Outputs/
#   ├─ R/
#   ├─ README.md
#   ├─ LICENSE
#   └─ [project name].Rproj
```

## Project structure - more details {auto-animate="true"}

```{r}
#| eval: false
#| echo: true
# .
# └─my_awesome_project/
#   ├─ Data/
#   |   ├─ Input/
#   |   ├─ Processed/
#   |   └─ Temp/
#   ├─ Outputs/
#   |   ├─ Data/
#   |   ├─ Figures/
#   |   └─ Tables/
#   ├─ R/
#   |   ├─ ___Init_project___.R
#   |   ├─ 00_Config_file.R
#   |   ├─ 01_Data_processing/
#   |   ├─ 02_Main_analyses/
#   |   ├─ 03_Supplementary_analyses/
#   |   ├─ Functions/
#   |       └─ example_fc.R
#   ├─ README.md
#   ├─ LICENSE
#   └─ [project name].Rproj
```

## Project structure - Analysis Example {auto-animate="true"}

```{r}
#| eval: false
#| echo: true
# .
# └─my_awesome_project/
#   ├─ Data/
#   ├─ Outputs/
#   ├─ R/
#   |   ├─ ___Init_project___.R
#   |   ├─ 00_Config_file.R
#   |   ├─ 00_Master.R
#   |   ├─ 01_Data_processing/
#   |   |   ├─ 01_Prepare_pollen_data.R
#   |   |   └─ 01_Download_terrain_data.R
#   |   ├─ 02_Main_analyses/
#   |   |   ├─ 01_Vegetation_history/
#   |   |   |   ├─ 01_Estimate_dissimilarty.R
#   |   |   |   └─ 02_Summarise_dissimilarity.R
#   |   |   ├─ 02_Rate_of_change/
#   |   |   |   ├─ 01_Roc_estimation.R
#   |   |   |   ├─ 02_Roc_interpolation.R
#   |   |   ├─ 03_Temporal_patters_of_groups/
#   |   |   |   ├─ 01_Define_groups.R
#   |   |   |   ├─ 02_Temporal_patterns_of_groups.R
#   |   |   └─ 04_Visualisation/
#   |   ├─ 03_Supplementary_analyses/
#   |   └─ Functions/
#   ├─ README.md
#   ├─ LICENSE
#   └─ [project name].Rproj
```

## [Practical Exercise]{.r-fit-text} {.exercise .textcenter}

::: {.r-fit-text} 
What are the cons and pros of this approach?
:::

`r countdown(minutes = 3)`

## Project structure - RStudio Projects

```{r}
#| label: rstudio-project
knitr::include_graphics("https://ecorepsci.github.io/reproducible-science/img/rstudio-project.jpg")
```

<br>
[**R-studio**]{.text-color-highlight-primary} is using [Projects]{.text-color-highlight-secondary} already by default

::: footer
[Reproducible Data Science](https://ecorepsci.github.io/reproducible-science/index.html)
:::

## Project structure - Working Directory

:::: columns
::: {.column width="50%" }
<br>
<br>

[@JennyBryan](https://twitter.com/JennyBryan):

::: {.blockquote}
If the first line of your R script is

```{r}
#| label: jenny-quote
#| eval: false
#| echo: true
#| code-line-numbers: false
setwd("C:\Users\jenny\path\that\only\I\have")
```

I will come into your office and **SET YOUR COMPUTER ON FIRE** 🔥.
:::
:::

::: {.column width="48%" .fragment}
```{r}
#| label: here-here
include_local_figure("here_pkg.png")
```

The [{here} package](https://here.r-lib.org/) is up for rescue! 
:::
::::

::: footer
Artwork by [@allison_horst](https://twitter.com/allison_horst)
:::

## Clean code

:::: columns
::: {.column width="50%" }
```{r}
#| label: ReadableCode
include_local_figure("ReadableCode.jpg")
```
:::

::: {.column width="48%" .fragment}

```{r}
#| label: wtf-per-minute
knitr::include_graphics("https://www.gilesd-j.com/wp-content/uploads/2023/01/image-1.png")
```

:::
::::

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)

[Glen Lipka](https://commadot.com/)
:::

## Code style and etiquette 

:::: {.columns}

::: {.column width="50%"}

Create a [Code Convention]{.text-color-highlight-primary} to keep the code: 

::: {.incremental}
* [**readable**]{.text-color-highlight-secondary}
* [**understandable**]{.text-color-highlight-secondary}
* [**maintainable**]{.text-color-highlight-secondary}
:::

::: {.fragment}
Allow for [**collaboration**]{.text-color-highlight-tertiary} and [**reproducibility**]{.text-color-highlight-tertiary}
:::

::: {.fragment}
* Example of [my personal code conventions](https://ondrejmottl.github.io/collaboration/code_convention.html)
:::
:::

::: {.column width="50%"}

```{r}
#| label: code-convention-meme
include_local_figure("meme-code-convention.jpg")
```
:::

::::

::: footer
[Reddit - Naming things is hard](https://www.reddit.com/r/ProgrammerHumor/comments/dwmwvj/naming_things_is_hard/)
:::

## Code style and etiquette 

:::: columns
::: {.column width="38%"}

[Code Convention]{.text-color-highlight-secondary}:

::: {.incremental}
* Script Structure
* Naming things
* Script annotation
:::

:::

::: {.column width="60%"}
:::
::::


## Code style and etiquette 

:::: columns
::: {.column width="38%"}

[Code Convention]{.text-color-highlight-secondary}:

* **[Script Structure]{.text-color-highlight-primary}**
* Naming things
* Script annotation

:::

::: {.column width="60%" .fragment .textcenter}

[One script = one task]{.text-color-highlight-tertiary}

```{r}
#| label: Script Structure
#| eval: false
#| echo: true
#| code-line-numbers: false
#----------------------------------------------------------#
#
#
#                     Project name 
#
#                      Script name
#                      - continue
#
#                       Authors 
#                        Year
#
#----------------------------------------------------------#

# General description of the script

#----------------------------------------------------------#
# 1. Load data -----
#----------------------------------------------------------#

#----------------------------------------------------------#
# 2. Data wrangling -----
#----------------------------------------------------------#

#--------------------------------------------------#
# 2.1. Fit model -----
#--------------------------------------------------#

#----------------------------------------------------------#
# 3. Save results -----
#----------------------------------------------------------#

```
:::
::::

## Code style and etiquette 

:::: columns
::: {.column width="38%" }

[Code Convention]{.text-color-highlight-secondary}:

* *Script Structure*
* **[Naming things]{.text-color-highlight-primary}**
* Script annotation

:::

::: {.column width="60%"}

Phil Karlton

::: {.blockquote}
There are only two hard things in Computer Science: cache invalidation and **naming things**.
:::

:::
::::

## Code style and etiquette 

:::: columns
::: {.column width="38%" }

[Code Convention]{.text-color-highlight-secondary}:

* *Script Structure*
* **[Naming things]{.text-color-highlight-primary}**
* Script annotation

:::

::: {.column width="60%" .textcenter} 
```{r}
#| label: case
include_local_figure("case.png")
```

[Do not use "."(dot) in the object names!]{.text-color-highlight-tertiary}

:::
::::

::: footer
Artwork by [@allison_horst](https://twitter.com/allison_horst)
:::

## Code style and etiquette 

:::: columns
::: {.column width="38%" }

[Code Convention]{.text-color-highlight-secondary}:

* *Script Structure*
* Naming things
* **[Script annotation]{.text-color-highlight-primary}**

:::

::: {.column width="60%"}

```{r}
#| label: code-comments
knitr::include_graphics("https://i.imgur.com/H4uaq47.jpeg")
```

:::
::::

::: footer
[r/ProgrammerHumor](https://www.reddit.com/r/ProgrammerHumor/comments/aatfvz/functional_programming_in_a_nutshell/)
:::

## Practical Exercise {.exercise}

`r countdown(minutes = 3)`

::::: {.panel-tabset}

### Ex1

:::: columns
::: {.column width="54%"}

```{r}
#| label: style ex1
#| eval: false
#| echo: true
#| code-line-numdbers: true
x = 23; y = 12

84->childHeight 

number_of_days_since_last_accident_floor_4_lab_23 = 0
```
:::

::: {.column width="45%" .fragment}
```{r}
#| label: style ex1 - solution
#| eval: false
#| echo: true
#| code-line-numbers: true
x <- 23
y <- 12

child_height_cm <- 84

days_since_last_accident <- 0
```
:::
::::

### Ex2 

:::: columns
::: {.column width="38%"}

```{r}
#| label: style ex2
#| eval: false
#| echo: true
#| code-line-numdbers: true
Day.One = 29.07.2024

f*12+i->h

c.m(List-Test)$`col A`
```
:::

::: {.column width="60%" .fragment}
```{r}
#| label: style ex2 - solution
#| eval: false
#| echo: true
#| code-line-numbers: true
day_one <- "2024-07-29"

height <-
  (feet * 12) + inches

list_test %>%
  calculate_mean() %>%
  purrr::chuck("column_a")
```
:::
::::

### Ex3

:::: columns
::: {.column width="30%"}

```{r}
#| label: style ex3
#| eval: false
#| echo: true
#| code-line-numbers: true
function(a,
b,c,d=100) 
{
if(a<c) a<-(a/b)*d
a 
} -> std.con  
```
:::

::: {.column width="69%" .fragment}
```{r}
#| label: style ex3 - solution
#| eval: false
#| echo: true
#| code-line-numbers: true
get_standart_concentration <- function(concentration = NULL,
                                       order_magnitude = NULL,
                                       expected_concentration = NULL,
                                       number_of_iterations = 100) {
  if (
    isTRUE(concentration < expected_concentration)
  ) {
    res <-
      (concentration / order_magnitude) * number_of_iterations
  }
  return(res)
}
```
:::
::::

:::::

## 

:::{.textcenter .r-fit-text}
‼️ BE [CONSISTENT]{.text-color-highlight-primary .bold} ‼️
:::

#### Code style Resources 
* [The {tidyverse} style guide](https://style.tidyverse.org/index.html)
* [Google’s R Style Guide](https://google.github.io/styleguide/Rguide.html)
* [Dealing with the Second Hardest Thing in Computer Science](https://indrajeetpatil.github.io/second-hardest-cs-thing/)
  * Presentation by [Indrajeet Patil](https://sites.google.com/site/indrajeetspatilmorality/)
* [Naming Things in Code](https://youtu.be/-J3wNP6u5YU)
  * YT video by [CodeAesthetic](https://www.youtube.com/@CodeAesthetic) 


## Self-containedness

:::: columns
::: {.column width="50%" }

<br>
<br>

Will [my code]{.text-color-highlight-primary} run on [your]{.text-color-highlight-secondary} machine?

Will [my code]{.text-color-highlight-primary} run [in 10 years]{.text-color-highlight-tertiary}?

:::

::: {.column width="49%" .fragment .textcenter}
```{r}
#| label: renv
include_local_figure("renv.png")
```

The [{revn} package](https://rstudio.github.io/renv/index.html) will make sure it will! 

:::
::::

::: footer
Artwork by [@allison_horst](https://twitter.com/allison_horst)
:::

## Self-containedness - advanced

What if we share the [whole Operating System]{.text-color-highlight-primary} as well?

:::: columns
::: {.column width="39%" }

```{r}
#| label: docker_logo
include_local_figure("docker_logo.png")
```

:::

::: {.column width="60%"}

```{r}
#| label: docker_scheme
knitr::include_graphics("https://www.statworx.com/wp-content/uploads/2019/02/Blog_R-script-in-docker_docker-run-1024x629.png")
```

:::
::::

::: footer
Icon by [icon-icons.com](https://icon-icons.com/icon/docker-official-logo/169250); artwork by [@statworx](https://www.statworx.com/en/)
:::

## All in code

```{r}
#| label: code-all-meme
knitr::include_graphics("https://guangchuangyu.github.io/blog_images/R/meme/Figs/unnamed-chunk-2-1.png")
```

::: footer
[create meme in R](https://guangchuangyu.github.io/2017/10/create-meme-in-r/)
:::

## All in code

:::: columns
::: {.column width="50%" }

```{r}
#| label: tidyverse
knitr::include_graphics("https://science.uct.ac.za/sites/default/files/content_migration/science_uct_ac_za/708/images/tidy_workflow.png")
```

:::

::: {.column width="50%"}

[Do not edit raw data!]{.bold .text-color-highlight-primary}

* `Data/Input/Raw/`
* Data wrangling in code
* Save proceesed data (`Data/Processed/`)
* [{tidyverse}](https://www.tidyverse.org/) for data manipulation

:::
::::

::: footer
[Centre for Statistics in Ecology, the Environment and Conservation (SEEC)](https://science.uct.ac.za/seec)
:::

# [Version control]{.bold .r-fit-text} {.title}

## Ring a bell ?

```{r}
#| label: final-final
knitr::include_graphics("https://biostats-r.github.io/biostats/github/Pics/gittutorial/phd101212s.gif")
```

## What is Version Control? 🤔

```{r}
#| label: VersionControl
include_local_figure("VersionControl.jpg")
```

::: {.textcenter}
It is all about [keeping track]{.text-color-highlight-primary} of [changes]{.text-color-highlight-secondary} 📓✍️
:::

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

## Practical Exercise {.exercise .textcenter} 

`r countdown(minutes = 3)`

:::: columns

::: {.column width="50%"}

### Do you recognize some of these questions?

* *It broke … hopefully I have a working version somewhere?*
* *Can you please send me the latest version?*
* *Which version are you using?*
* *Found a bug! Since when was it there?*
* *I am sure it used to work. When did it change?*
* *My laptop is gone. Is my thesis now gone?*

:::

::: {.column width="50%" }

### How do you keep track of changes?

```{r}
#| label: version-nightmare
knitr::include_graphics("https://ecorepsci.github.io/reproducible-science/img/version-nightmare.png")
```

:::

::::

::: footer
[Reproducible Data Science](https://ecorepsci.github.io/reproducible-science/index.html)
:::

##

:::: columns

::: {.column width="45%"}

### Git {.textcenter}

* local software
* keep track of changes of files 

<br>

```{r}
#| label: git-logo
#| fig-width: 1
#| fig-height: 1 
knitr::include_graphics("https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/Git_icon.svg/768px-Git_icon.svg.png")
```

:::

::: {.column width="10%" }
:::

::: {.column width="45%" }

### GitHub {.textcenter}

* host server
* store (git) the data
* project management, collaboration, publishing

```{r}
#| label: github-logo
knitr::include_graphics("https://upload.wikimedia.org/wikipedia/commons/thumb/a/ae/Github-desktop-logo-symbol.svg/768px-Github-desktop-logo-symbol.svg.png")
```

:::

::::

## a commit

A [**commit**]{.text-color-highlight-primary} is a [record]{.text-color-highlight-secondary } of a change

If you create or edit a file in your repository and save the changes, you need to [record]{.text-color-highlight-secondary} your change via a [**commit**]{.text-color-highlight-primary}

::::: {.fragment}

### Chess analogy? 

:::: columns

::: {.column width="45%"}

```{r}
#| label: chess
knitr::include_graphics("https://www.wikihow.com/images/thumb/0/06/Play-Chess-Step-28-Version-5.jpg/aid54279-v4-728px-Play-Chess-Step-28-Version-5.jpg")
```

:::

::: {.column width="45%" }

**Chess move diary**:

* Bc4 (Bishop to c4)
* Nf3 (Knight to f3)
* Qc7 (Queen to c7)

:::

::::

:::::

::: footer
[wikiHow: How to Play Chess?](https://www.wikihow.com/Play-Chess)
:::

## a commit

:::: columns
::: {.column width="45%" .textcenter} 
```{r}
#| label: git1-chess
knitr::include_graphics("https://www.wikihow.com/images/thumb/c/c3/Play-Chess-Step-24-Version-5.jpg/aid54279-v4-728px-Play-Chess-Step-24-Version-5.jpg")
```

*Pawn to d4*
:::

::: {.column width="45%" .textcenter .fragment}
```{r}
#| label: git01
include_local_figure("git01.png")
```

*Edit line 32 of file A*
:::
::::

::: footer
[wikiHow: How to Play Chess?](https://www.wikihow.com/Play-Chess)
:::

## a commit

<br>
<br>

```{r}
#| label: git02
include_local_figure("git02.png")
```

## Git/GitHub setup AKA "git hell"


```{r}
#| label: ErrorManagement
include_local_figure("ErrorManagement.jpg")
```

Follow instructions in [Version Control - git hell](https://ondrejmottl.github.io/VersionControl_gitHell/) (a separate presentation).

::: {.blockquote}
Getting all the necessary software installed, configured, and playing nicely together is honestly half the battle ... **Brace yourself for some pain**
:::

::: footer
[Happy Git and GitHub for the useR](https://happygitwithr.com/install-intro) |
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

## Basic vocabulary

:::: columns

::: {.column width="34%" .incremental}

 * [R script]{.text-color-highlight-primary} is a record of code.
 * [R Project]{.text-color-highlight-primary} is self contained project/study/paper containg R scripts, data, figures, etc..
 * Every such project is called [repository]{.text-color-highlight-secondary} (ie a *repo*) 
 * Your **local** repository is called [local]{.text-color-highlight-tertiary}
 * Your **online** repository, is called [remote]{.text-color-highlight-tertiary}

:::

:::{.column width="55%" .fragment}
```{r}
#| label: local-remote
knitr::include_graphics("https://user.oc-static.com/upload/2022/01/04/16412576933806_image30.png")
```
:::

::::

::: footer
[https://openclassrooms.com/](https://openclassrooms.com/en/courses/7476131-manage-your-code-project-with-git-and-github/7681891-work-in-your-local-git-repository)
::: 

## Git init (project first)

Activate [git]{.text-color-highlight-primary} for a repo 

::::: {.panel-tabset}

### RStudio

For existing project

```{r}
#| label: git-init-rstudio
#| echo: true
#| eval: false
#| code-line-numbers: false
usethis::use_git()
```

Create new project with git tracking

```{r}
#| label: git-init-rstudio-new
#| echo: true
#| eval: false
#| code-line-numbers: false
usethis::create_project("<DIRECTORY>")
# switch to the new project
usethis::use_git()
```


### Command line

For existing project

```{bash}
#| label: git-init-cl
#| echo: true
#| eval: false
#| code-line-numbers: false
git init
```

Create new project with git tracking

```{bash}
#| label: git-init-cl-new
#| echo: true
#| eval: false
#| code-line-numbers: false
git init <DIRECTORY>
```

### VS Code

Git integration is automatic in [Source control]{.text-color-highlight-secondary} panel

```{r}
#| label: git-init-vscode
knitr::include_graphics("https://www.sqlshack.com/wp-content/uploads/2020/07/visual-studio-code-and-git-source-control.png")
```

### GH Desktop

:::: columns

::: {.column width="60%"}

For existing project

```{r}
#| label: git-init-GH
knitr::include_graphics("https://docs.github.com/assets/cb-10757/mw-1440/images/help/desktop/add-local-repository-windows.webp")
```

:::

::: {.column width="40%"}

Create new project with git tracking

```{r}
#| label: git-init-GH-new
knitr::include_graphics("https://docs.github.com/assets/cb-143755/mw-1440/images/help/desktop/lets-get-started.webp")
```

:::

::::

:::::

::: footer
[SQLShack](https://www.sqlshack.com/visual-studio-code-vs-code-integration-with-git-source-control/)
:::

## Git clone (repo first)

Copy (download) for  [remote repo]{.text-color-highlight-primary} to [local]{.text-color-highlight-secondary} machine

::::: {.panel-tabset}

### RStudio

```{r}
#| label: git-clone-rstudio
#| echo: true
#| eval: false
#| code-line-numbers: false
usethis::create_from_github(
  repo_spec = "https://github.com/<OWNER>/<REPO>.git",
  destdir = "<DIRECTORY>",
  fork = FALSE
  )
```

### Command line

```{bash}
#| label: git-colne-cl
#| echo: true
#| eval: false
#| code-line-numbers: false
git clone https://github.com/<OWNER>/<REPO>.git <DIRECTORY>
```

### VS Code

Open [Command Palette]{.text-color-highlight-secondary} (`Ctrl+Shift+p`)

Paste in URL: `"https://github.com/<OWNER>/<REPO>.git"`

### GH Desktop

```{r}
#| label: git-clone-GH
knitr::include_graphics("https://docs.github.com/assets/cb-10969/mw-1440/images/help/desktop/clone-file-menu-windows.webp")
```

:::::

## 3 states of a file 

<br>

:::: columns
::: {.column width="29%"}
```{r}
#| label: git-stage-scheme
knitr::include_graphics("https://git-scm.com/images/about/index1@2x.png")
```
:::

::: {.column width="60%" .fragment}
```{r}
#| label: git-stage-draw
knitr::include_graphics("https://i0.wp.com/jessitron.com/wp-content/uploads/2012/12/27eb8-screenshot2012-12-09at2.07.55pm.png")
```
:::
::::

::: footer
[git---everything-is-local](https://git-scm.com/)

[jessitron](https://jessitron.com/2012/12/09/git-the-many-parts-five-categories-of-files/)
:::

## Staging changes

Make a change to a file and save it. Now *stage* the change:

::::: {.panel-tabset}

### RStudio

:::: columns
::: {.column width="45%"}

```{r}
#| label: git-stage-rstudio
knitr::include_graphics("https://annakrystalli.me/talks/assets/git_tab.png")
```

:::

::: {.column width="45%"}

* two yellow `??` indicates adding a file 
* a blue `M` indicates edit a file that has already been committed
* a red `D` indicates deleting a file

:::

::::

### Command line

```{bash}
#| label: git-stage-cl
#| echo: true
#| eval: false
#| code-line-numbers: false
git add <FILE>
```

### VS Code

:::: columns

::: {.column width="20%"}
:::


::: {.column width="60%"}

```{r}
#| label: git-stage-VScode
knitr::include_graphics("https://code.visualstudio.com/assets/docs/sourcecontrol/overview/stage-changes.png")
```

:::

::: {.column width="20%"}
:::

::::

### GH Desktop

:::: columns
::: {.column width="45%"}

```{r}
#| label: git-stage-GH
knitr::include_graphics("https://docs.github.com/assets/cb-16555/mw-1440/images/help/desktop/commit-all.webp")
```

:::

::: {.column width="45%"}

* The red icon indicates removed files.
* The yellow icon indicates modified files.
* The green icon indicates added files.
:::

::::

:::::

## a first commit

Commit (record) *staged* changes:

::::: {.panel-tabset}

### RStudio

```{r}
#| label: git-commit-rstudio
knitr::include_graphics("https://biostats-r.github.io/biostats/github/Pics/gittutorial/19_commit_window.png")
```

### Command line

```{bash}
#| label: git-commit-cl
#| echo: true
#| eval: false
#| code-line-numbers: false
git commit -am "commit message"
```

### VS Code

```{r}
#| label: git-commit-vscode
knitr::include_graphics("https://code.visualstudio.com/assets/docs/sourcecontrol/intro/scm-staging.png")
```

### GH Desktop

:::: columns

::: {.column width="20%"}
:::

::: {.column width="60%"}
```{r}
#| label: git-commit-gh
knitr::include_graphics("https://user-images.githubusercontent.com/359239/43204294-df0e02b8-8ff6-11e8-9a6d-e1ceb6e460e2.png")
```
:::

::: {.column width="20%"}
:::

::::

:::::

## Dissection of a commit

:::: columns

:::{.column width="60%"}
```{bash}
#| label: git-commit-dissection
#| echo: true
#| eval: false
#| code-line-numbers: true
$ git log --stat
commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    Remove unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    Initial commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
```
:::

:::{.column width="40%"}

**SHA** - unique identifier

**Author** - who has done this?

**Date** - when was this done?

**Message** - description of what has been done

**Stats** - what has changed?

:::

::::

## Commit message

Commits are **quick** and **cheap**. Therefore:

1. commit [**often** (!)]{.text-color-highlight-primary} 
2. provide [**useful**]{.text-color-highlight-secondary} commit messages.

:::: columns

::: {.column width="20%"}
:::

::: {.column width="60%" .fragment}
```{r}
#| label: commit-message
knitr::include_graphics("https://biostats-r.github.io/biostats/github/Pics/gittutorial/20_git_commit.png")
```
:::

::: {.column width="20%"}
:::

::::

## Commit history

```{r}
#| label: commit-history
knitr::include_graphics("https://happygitwithr.com/img/commit-diff-sha-tag.png")
```

::: footer
[Happy Git and GitHub for the useR](https://happygitwithr.com/install-intro)
:::

## [Practical Exercise]{.r-fit-text} {.exercise .textcenter}

::: {.r-fit-text} 
1. Clone a repo
2. commit some changes
3. review history
:::

`r countdown(minutes = 3)`

## remote

```{r}
#| label: git-remote
knitr::include_graphics("https://biostats-r.github.io/biostats/github/Pics/gittutorial/0_workflow_git.png")
```

::: footer
[biostats: Version control with GitHub and RStudio](https://biostats-r.github.io/biostats/github/1_Git_Tutorial.html)
:::

## remote

Now we need to *sync* chnages with the [remote]{.text-color-highlight-primary} using [**PUSH**]{.text-color-highlight-secondary}


::::: {.panel-tabset}

### RStudio

Add a remote to existing local repo (only once):

```{r}
#| label: git-mk-remote-rstudio
#| echo: true
#| eval: false
#| code-line-numbers: false
usethis::use_github(protocol  = "https")
```

Push local to remote (GitHub):

```{r}
#| label: git-push-rstudio
knitr::include_graphics("https://biostats-r.github.io/biostats/github/Pics/gittutorial/21_push.png")
```

### Command line

Add a remote to existing local repo (only once):

```{bash}
#| label: git-mk-remote-cl
#| echo: true
#| eval: false
#| code-line-numbers: false
git remote add origin https://github.com/<OWNER>/<REPO>
```

Push local to remote (GitHub):

```{bash}
#| label: git-push-cl
#| echo: true
#| eval: false
#| code-line-numbers: false
git push
```

### VS Code

:::: columns
::: {.column width="60%"}
Add a remote to existing local repo (only once):
```{r}
#| label: git-mk-remotze-vscode
knitr::include_graphics("https://code.visualstudio.com/assets/docs/sourcecontrol/intro/remote-repo.png")
```
:::

::: {.column width="40%"}
Push local to remote (GitHub):
```{r}
#| label: git-push-vscode
knitr::include_graphics("https://code.visualstudio.com/assets/docs/sourcecontrol/intro/sync.png")
```
:::
::::

### GH Desktop

:::: columns
::: {.column width="50%"}
Add a remote to existing local repo (only once):
```{r}
#| label: git--mk-remote-GH
knitr::include_graphics("https://docs.github.com/assets/cb-54091/mw-1440/images/help/desktop/publish-repository.webp")
```
:::

::: {.column width="50%"}
Push local to remote (GitHub):
```{r}
#| label: git-push-GH
knitr::include_graphics("https://docs.github.com/assets/cb-17787/mw-1440/images/help/desktop/push-to-origin.webp")
```
:::
::::

:::::

## [GitHub intermezzo]{.r-fit-text} {.subtitle .textcenter}

## A GitHub repo

```{r}
#| label: github-intermezzo
knitr::include_graphics("https://biostats-r.github.io/biostats/github/Pics/gittutorial/10_new_repo.png")
```

::: footer
[biostats: Version control with GitHub and RStudio](https://biostats-r.github.io/biostats/github/1_Git_Tutorial.html)
:::

## GitHub creating a repo

```{r}
#| label: gh-mk-repo-new
include_local_figure("01_new_button.png")
```

::: footer
[biostats: Version control with GitHub and RStudio](https://biostats-r.github.io/biostats/github/1_Git_Tutorial.html)
:::

## GitHub creating a repo

```{r}
#| label: gh-mk-repo-owner
include_local_figure("03_owner.png")
```

::: footer
[biostats: Version control with GitHub and RStudio](https://biostats-r.github.io/biostats/github/1_Git_Tutorial.html)
:::

## GitHub creating a repo

```{r}
#| label: gh-mk-repo-name
include_local_figure("04_name.png")
```

::: footer
[biostats: Version control with GitHub and RStudio](https://biostats-r.github.io/biostats/github/1_Git_Tutorial.html)
:::

## GitHub creating a repo

```{r}
#| label: gh-mk-repo-visibility
include_local_figure("05_visibility.png")
```

::: footer
[biostats: Version control with GitHub and RStudio](https://biostats-r.github.io/biostats/github/1_Git_Tutorial.html)
:::

## GitHub creating a repo

**README** - description of the project

**.gitignore** - list of files ignored by GitHub (more about it later)

**license** - tell other what they can do wit your code

```{r}
#| label: gh-mk-repo-readme
include_local_figure("06_readme.png")
```

::: footer
[biostats: Version control with GitHub and RStudio](https://biostats-r.github.io/biostats/github/1_Git_Tutorial.html)
:::

## A note on {usethis}

[{usethis} package](https://usethis.r-lib.org/index.html) provide a lot of usefull helpers

* **README** - description of the project

```{r}
#| label: usethis-readme
#| echo: true
#| eval: false
#| code-line-numbers: false
usethis::use_readme_md()
```

* **LICENSE** - restict the use of your code

```{r}
#| label: usethis-licence
#| echo: true
#| eval: false
#| code-line-numbers: false
usethis::use_mit_license(name = "Ondřej Mottl")
```

* **CONTRIBUTING.md** - guidelines for contributors

```{r}
#| label: usethis-contributing
#| echo: true
#| eval: false
#| code-line-numbers: false
usethis::use_tidy_contributing()
```

* **CODE_OF_CONDUCT.md** - set the tone for discourse between contributors

```{r}
#| label: usethis-code-of-conduct
#| echo: true
#| eval: false
#| code-line-numbers: false
usethis::use_code_of_conduct()
```

## GitHub creating a repo

```{r}
#| label: gh-mk-repo-final
include_local_figure("07_final_click.png")
```

::: footer
[biostats: Version control with GitHub and RStudio](https://biostats-r.github.io/biostats/github/1_Git_Tutorial.html)
:::

## `.gitignore` file

A guide to the [git]{.text-color-highlight-primary} which files [**should be ignored for detecting changes**]{.text-color-highlight-secondary}

Here is an example of a **.gitignore** file:
```{bash}
#| label: gitignore
#| echo: true
#| eval: false
#| code-line-numbers: true
# History files
.Rhistory
.Rapp.history

# Session Data files
.RData

# RStudio files
.Rproj.user/

# OAuth2 token, see https://github.com/hadley/httr/releases/tag/v0.3
.httr-oauth
.Rproj.user

#data (excludes everything in the folder data)
data/*

# you can make exceptions for specific files
!data/dragon_taxonomy.csv

#figures & output (excludes all figure files)
*.png
*.pdf
*.jpeg
```

## update local- PULL 

```{r}
#| label: git-many-clones
knitr::include_graphics("https://sfdctechie.wordpress.com/wp-content/uploads/2019/12/github.png")
```

::: footer
[sfdc techie – Pavan's blog](https://sfdctechie.wordpress.com/2019/12/27/how-to-add-a-salesforce-dx-project-to-source-control-step-by-step-guide/)
:::

## update local- PULL 

```{r}
#| label: git-pull
knitr::include_graphics("https://biostats-r.github.io/biostats/github/Pics/gittutorial/22_workflow2.png")
```

::: footer
[biostats: Version control with GitHub and RStudio](https://biostats-r.github.io/biostats/github/1_Git_Tutorial.html)
:::

## update local- PULL 

Now we need to *sync* chnages from the [remote]{.text-color-highlight-secondary} to [local]{.text-color-highlight-tertiary} the using [**PULL**]{.text-color-highlight-primary}

::::: {.panel-tabset}

### RStudio

:::: columns
::: {.column width="10%"}
:::

::: {.column width="70%"}
Pull from remote (GitHub) to local
```{r}
#| label: git-pull-rstudio
knitr::include_graphics("https://annakrystalli.me/talks/assets/git_tab.png")
```
:::
::::

### Command line

Pull from remote (GitHub) to local:

```{bash}
#| label: git-pull-cl
#| echo: true
#| eval: false
#| code-line-numbers: false
git pull
```

### VS Code

:::: columns
::: {.column width="10%"}
:::

::: {.column width="70%"}
Pull from remote (GitHub) to local
```{r}
#| label: git-pull-vscode
include_local_figure("vscode_sync.png")
```
:::
::::

### GH Desktop

:::: columns
::: {.column width="10%"}
:::

::: {.column width="70%"}
Pull from remote (GitHub) to local
```{r}
#| label: git-pull-GH
knitr::include_graphics("https://docs.github.com/assets/cb-24440/mw-1440/images/help/desktop/pull-button.webp")
```
:::
::::

:::::

## Merge conflict 💩💩💩

```{r}
#| label: git-merge-conflict-vis
knitr::include_graphics("https://www.simplilearn.com/ice9/free_resources_article_thumb/pull-push.JPG")
```

A [merge conflict]{.text-color-highlight-primary} can occur when you are changing the [same line]{.text-color-highlight-secondary} in one file [differently](.text-color-highlight-tertiary).

:::footer
[https://www.simplilearn.com/](https://www.simplilearn.com/tutorials/git-tutorial/merge-conflicts-in-git)
:::

## Merge conflict 💩💩💩

<br>

```{bash}
#| label: git-merge-conflict
#| echo: true
#| eval: false
#| code-line-numbers: false
To https://github.com/picardis/myrepo.git
 ! [rejected]        master -> master (fetch first)
error: failed to push some refs to 'https://github.com/picardis/myrepo.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
```

:::: columns

::: {.column width="50%" .fragment}
a good strategy to avoid such conflicts: 

* Commit often
* Work in small steps
* Push and pull regularly
* Organize your code in small modules (scripts)
:::

::: {.column width="50%" .fragment}
<br>

Merge conflicts cannot always be avoided (but can be mitigated by *branches*; later).
:::
::::

## Merge conflict 💩💩💩

```{bash}
#| label: git-merge-conflict-example
#| echo: true
#| eval: false
#| code-line-numbers: false
If you have questions, please
<<<<< HEAD
open an issue
=======
ask your question in IRC.
>>>>> branch-a
```

::: {.fragment}

Delete the unwanted text (including the *decorations*)

```{bash}
#| label: git-merge-conflict-example-solution
#| echo: true
#| eval: false
#| code-line-numbers: false
If you have questions, please
ask your question in IRC.
```

Then **save the file**, **stage**, and **commit** again 

:::

## [Practical Exercise]{.r-fit-text} {.exercise .textcenter}

:::{.r-fit-text}
Create a merge conflict and fix it
:::

`r countdown(minutes = 3)`

## Ups! I have made a mistake 😮

How to undo last commit?

[Variant A]{.text-color-highlight-primary}: I commited but **NOT** [pushed yet]{.text-color-highlight-tertiary}.

::::: {.panel-tabset}

### RStudio

RStudio has a range of possibilities to work with Git and GitHub as shown in this tutorial. The **Terminal** (NOT *console*) has more commands and options and will be handy for trouble shooting.

```{bash}
#| label: git-undo-commit-rstudio
#| echo: true
#| eval: false
#| code-line-numbers: false
git reset --soft HEAD@{1}
```

### Command line

```{bash}
#| label: git-undo-commit-cl
#| echo: true
#| eval: false
#| code-line-numbers: false
git reset --soft HEAD@{1}
```

### VS Code

Open [Command Palette]{.text-color-highlight-secondary} (`Ctrl+Shift+p`)

Write [Git: Undo Last Commit]{.text-color-highlight-tertiary}

### GH Desktop

:::: columns
:::{.column width="10%"}
:::

:::{.column width="70%"}
```{r}
#| label: git-undo-commit-GH
knitr::include_graphics("https://docs.github.com/assets/cb-12506/mw-1440/images/help/desktop/undo-commit.webp")
```
:::
::::

:::::

## Ups! I have made a mistake 😮

How to undo last commit?

[Variant B]{.text-color-highlight-secondary}: I commited but **AND** [pushed already]{.text-color-highlight-tertiary}.

::::: {.panel-tabset}

### RStudio

We need the **Terminal** (NOT *console*) again.

Copy the **SHA** of the last commit

```{bash}
#| label: git-reset-commit-rstudio
#| echo: true
#| eval: false
#| code-line-numbers: false
git reset --hard <SHA>
```

### Command line

Copy the **SHA** of the last commit

```{bash}
#| label: git-reset-commit-cl
#| echo: true
#| eval: false
#| code-line-numbers: false
git reset --hard <SHA>
```

### VS Code

In the [Source control]{.text-color-highlight-secondary} panel -> **COMMITS** section -> Right-click on the commit you want to revert to -> Select the [Reset Current Branch to Previous Commit]{.text-color-highlight-tertiary}

:::: columns
:::{.column width="10%"}
:::

:::{.column width="60%"}
```{r}
#| label: git-reset-commit-VScode
knitr::include_graphics("https://www.gitkraken.com/wp-content/uploads/2022/03/gitlens-revert-commit-sidebar-1.png")
```
:::
::::

### GH Desktop

Right-click on the commit you would like to revert to and select [Reset to commit]{.text-color-highlight-tertiary}.

:::: columns
:::{.column width="10%"}
:::

:::{.column width="70%"}
```{r}
#| label: git-reset-commit-GH
knitr::include_graphics("https://docs.github.com/assets/cb-130280/mw-1440/images/help/desktop/history-tab-in-commit-sidebar.webp")
```
:::
::::

:::::

## [Branches]{.r-fit-text} {.subtitle .textcenter}

## Branches

```{r}
#| label: git-branches
knitr::include_graphics("https://miro.medium.com/v2/resize:fit:640/format:webp/1*T4HW6dnJQQz2c2soc4AeFQ.png")
```

:::footer
[Git For Dummies](https://nicholas0010.medium.com/git-for-dummies-2-2-2874e625bf65)
:::

## Branches

```{r}
#| label: git-branches-funny
knitr::include_graphics("https://coderefinery.github.io/git-intro/_images/gophers.png")
```

:::footer
[coderefinery](https://coderefinery.github.io/git-intro/commits/)
:::

## Make a branch

::::: {.panel-tabset}

### RStudio

:::: columns
::: {.column width="70%"}
```{r}
#| label: git-make-branch-rstudio
knitr::include_graphics("https://biostats-r.github.io/biostats/github/Pics/fork_branch_tutorial/5_make_new_branch.png")
```
:::

::: {.column width="30%"}
```{r}
#| label: git-make-branch2-rstudio
knitr::include_graphics("https://biostats-r.github.io/biostats/github/Pics/fork_branch_tutorial/6_name_branch.png")
```
:::
::::

### Command line

Copy the **SHA** of the last commit

```{bash}
#| label: git-make-branch-cl
#| echo: true
#| eval: false
#| code-line-numbers: false
git branch <BRANCH-NAME>
```

### VS Code

:::: columns
:::{.column width="10%"}
:::

:::{.column width="60%"}
```{r}
#| label: git-make-branch-VScode
knitr::include_graphics("https://code.visualstudio.com/assets/docs/sourcecontrol/intro/scm-create-branch.png")
```
:::
::::

### GH Desktop

:::: columns
:::{.column width="10%"}
:::

:::{.column width="60%"}
```{r}
#| label: git-make-branch-GH
knitr::include_graphics("https://docs.github.com/assets/cb-26427/mw-1440/images/help/desktop/new-branch-button-mac.webp")
```
:::
::::

:::::

## Switching between branches

The default branch is called [main]{.text-color-highlight-secondary} or [master]{.text-color-highlight-secondary}

! Make sure that you have all changes commited before switching !

::::: {.panel-tabset}

### RStudio

:::: columns
::: {.column width="10%"}
:::

::: {.column width="70%"}
```{r}
#| label: git-switch-branch-rstudio
knitr::include_graphics("https://aberdeenstudygroup.github.io/studyGroup/lessons/SG-T1-GitHubVersionControl/img/ChangeBranch.png")
```
:::
::::

### Command line

Copy the **SHA** of the last commit

```{bash}
#| label: git-switch-branch-cl
#| echo: true
#| eval: false
#| code-line-numbers: false
git checkout  <BRANCH-NAME>
```

### VS Code

:::: columns
:::{.column width="10%"}
:::

:::{.column width="55%"}
```{r}
#| label: git-switch-branch-VScode
knitr::include_graphics("https://geo-jobe.com/wp-content/uploads/2022/07/CheckoutOrCreateBranch-1.png")
```
:::
::::

### GH Desktop

:::: columns
:::{.column width="10%"}
:::

:::{.column width="60%"}
```{r}
#| label: git-switch-branch-GH
knitr::include_graphics("https://docs.github.com/assets/cb-38142/mw-1440/images/help/desktop/select-branch-from-dropdown.webp")
```
:::
::::

:::::

## [Practical Exercise]{.r-fit-text} {.exercise .textcenter}

:::{.r-fit-text}
1. Make a branch and switch
2. commit chnages
3. push 
:::

`r countdown(minutes = 3)`

## Merging branches

```{r}
#| label: git-merge-branch-scheme
knitr::include_graphics("https://media.geeksforgeeks.org/wp-content/uploads/20230516192737/git-three-way-merging.png")
```

## Merging branches

```{r}
#| label: git-merge-branch-scheme2
knitr::include_graphics("https://www.yakuter.com/wp-content/yuklemeler/1_sMJbSt3sLrC-sIsPOVRBdw.png")
```

## Pull Request (PR)

Request to merge a branch

```{r}
#| label: git-pull-request-scheme
knitr::include_graphics("https://crunchify.com/wp-content/uploads/2017/09/Github-WorkFlow-Tips-Crunchify-Tips.png")
```

## Pull Request - create

After you **push** new branch, you should have a green button [Compare & pull request]{.text-color-highlight-primary}

```{r}
#| label: git-pull-request-create
knitr::include_graphics("https://aberdeenstudygroup.github.io/studyGroup/lessons/SG-T1-GitHubVersionControl/img/CreatePullReq.png")
```

::: footer
[Aberdeen Study Group](https://aberdeenstudygroup.github.io/studyGroup/lessons/SG-T1-GitHubVersionControl/VersionControl/)
:::

## Pull Request - components

```{r}
#| label: git-pull-request-componnets
knitr::include_graphics("https://www.dummies.com/wp-content/uploads/github-open-pull-request.jpg")
```

::: footer
[GitHub for dummies](https://www.dummies.com/article/technology/programming-web-design/general-programming-web-design/what-are-github-pull-requests-264741/)
:::

## Pull Request - Overview

Now you can [more commits]{.text-color-highlight-primary}, add [Comment]{.text-color-highlight-secondary} to start discussion, or [merge]{.text-color-highlight-tertiary}

```{r}
#| label: git-pull-request-overview
knitr::include_graphics("https://aberdeenstudygroup.github.io/studyGroup/lessons/SG-T1-GitHubVersionControl/img/Merge.png")
```

::: footer
[Aberdeen Study Group](https://aberdeenstudygroup.github.io/studyGroup/lessons/SG-T1-GitHubVersionControl/VersionControl/)
:::

## Note on Markdown

:::: {.columns}

:::: {.column width="50%"}
You can use [Markdown]{.text-color-highlight-primary} in the description and comments

More details on [Github Docs](https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)
:::

::: {.column width="50%"}
```{r}
#| label: markdown-syntax-pr
include_local_figure("Markdown_syntax.png")
```
:::
::::

::: footer
[https://arminreiter.com/](https://arminreiter.com/resources/)
:::

## Merging strategies

:::: columns

::: {.column width="34%"}
Merge commit
```{r}
#| label: git-merge-strategy-merge
knitr::include_graphics("https://lukemerrett.com/content/images/2021/08/906613c7-94fb-41a8-9c74-77895dec7f53.png")
```
:::

::: {.column width="34%" .fragment}
Squash & Merge
```{r}
#| label: git-merge-strategy-squash
knitr::include_graphics("https://lukemerrett.com/content/images/2021/08/fa7e8e52-7037-40f9-a1fd-3dcc916d9840.png")
```
:::

::: {.column width="30%" .fragment}
Rebase & Merge
```{r}
#| label: git-merge-strategy-rebase
knitr::include_graphics("https://lukemerrett.com/content/images/2021/08/c44e8334-f187-4386-8946-d7996f883de3.png")
```
:::

::::

::: footer
[Luke Merrett](https://lukemerrett.com/different-merge-types-in-git/)
:::

## Delete branch

We can delete branch directly on GitHub after merging

```{r}
#| label: git-pull-request-delete-branch
knitr::include_graphics("https://aberdeenstudygroup.github.io/studyGroup/lessons/SG-T1-GitHubVersionControl/img/DeleteBranch.png")
```

::: footer
[Aberdeen Study Group](https://aberdeenstudygroup.github.io/studyGroup/lessons/SG-T1-GitHubVersionControl/VersionControl/)
:::

## Delete branch

We can also delete branch **before** merging

::::: {.panel-tabset}

### RStudio

We need the **Terminal** (NOT *console*) again.

To delete a [local]{.text-color-highlight-secondary} branch

```{bash}
#| label: git-delete-branch-local-rstudio
#| echo: true
#| eval: false
#| code-line-numbers: false
git branch -d <BRANCH-NAME>
```

To delete a [remote]{.text-color-highlight-primary} branch

```{bash}
#| label: git-delete-branch-remote-rstudio
#| echo: true
#| eval: false
#| code-line-numbers: false
git push origin --delete <BRANCH-NAME>
```

### Command line

To delete a [local]{.text-color-highlight-secondary} branch

```{bash}
#| label: git-delete-branch-local-cl
#| echo: true
#| eval: false
#| code-line-numbers: false
git branch -d <BRANCH-NAME>
```

To delete a [remote]{.text-color-highlight-primary} branch

```{bash}
#| label: git-delete-branch-remote-cl
#| echo: true
#| eval: false
#| code-line-numbers: false
git push origin --delete <BRANCH-NAME>
```

### VS Code

Open [Command Palette]{.text-color-highlight-secondary} (`Ctrl+Shift+p`)

Select [Git: Delete branch ...]{.text-color-highlight-tertiary}

### GH Desktop

:::: columns
:::{.column width="10%"}
:::

:::{.column width="60%"}
```{r}
#| label: git-delete-branch-GH
knitr::include_graphics("https://docs.github.com/assets/cb-28505/mw-1440/images/help/desktop/delete-branch-win.webp")
```
:::
::::

:::::

## Pull Request - review

A tool to [review]{.text-color-highlight-primary} [suggested]{.text-color-highlight-secondary} changes

```{r}
#| label: git-pull-request-scheme2
knitr::include_graphics("https://atlassianblog.wpengine.com/wp-content/uploads/bitbucket411-blog-1200x-branches2.png")
```

::: footer
[https://www.atlassian.com/](https://www.atlassian.com/blog/bitbucket/5-pull-request-must-haves)
:::

## Pull Request - review

On [someone else's PR]{.text-color-highlight-primary}, you can comment on **individual lines** or **whole files**

```{r}
#| label: git-pull-request-review
include_local_figure("5_review.png")
```

## Pull Request - review

```{r}
#| label: git-pull-request-add-commets
knitr::include_graphics("https://www.researchgate.net/profile/Yue-Yu-126/publication/321632407/figure/fig1/AS:569701769191424@1512838894719/Example-comments-on-GitHub_W640.jpg")
```

::: footer
[What Are They Talking About? Analyzing Code Reviews in Pull-Based Development Model](http://dx.doi.org/10.1007/s11390-017-1783-2)
:::

## Merge conflict with branch 💩

Merge conflict with branches is much more pleasant😎

```{r}
#| label: git-pull-request-review2
include_local_figure("4_merge_conflict.png")
```

## Merge conflict with branch 💩

Edit the file as needed

```{r}
#| label: git-merge-conflic-gh-2
include_local_figure("5_conflict.png")
```

## Merge conflict with branch 💩

Commit the changes

```{r}
#| label: git-merge-conflic-gh-3
include_local_figure("7_solved.png")
```

## [Practical Exercise]{.r-fit-text} {.exercise .textcenter}

:::{.r-fit-text}
Merge a branch
:::

`r countdown(minutes = 3)`

## Bonus for R users

```{r}
#| label: git-pr-helpers
knitr::include_graphics("https://www.garrickadenbuie.com/blog/pull-request-flow-usethis/usethis-pr-flow-medium.jpg")
```

::: footer
[Pull Request Flow with usethis](https://www.garrickadenbuie.com/blog/pull-request-flow-usethis)
:::

# [Project management]{.bold .r-fit-text} {.title}

[& Collaboration]{.bold .r-fit-text}

(via GitHub tools)

## Collaboration

```{r}
#| label: community-exchange
include_local_figure("community-exchange.jpg")
```

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

## Collaboration types

```{r}
#| label: collaboration-types
include_local_figure("collaboration-types.jpg")
```

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

## Collaboration forms

```{r}
#| label: Collaboration
include_local_figure("Collaboration.jpg")
```

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

## Collaborate on a project

```{r}
#| label: ProjectDesign
include_local_figure("ProjectDesign.jpg")
```

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

## Project communication plan

```{r}
#| label: project-communication-collaborations
knitr::include_graphics("https://plan.io/images/blog/project-communication-plan.png?1722938254")
```

::: footer
[Plan.io](https://plan.io/blog/)
:::

## Project Management

<br>
<br>

:::: columns

::: {.column width="20%"}
:::

::: {.column width="60%"}
[wiki](https://en.wikipedia.org/wiki/Project_management):

::: {.blockquote}
[Project management]{.text-color-highlight-primary} is the process of leading work of a team … to achieve all project [goals]{.text-color-highlight-secondary} within the given [constraints]{.text-color-highlight-tertiary}.
:::
:::

::: {.column width="20%"}
:::

::::

## Project Management

```{r}
#| label: ProjectManagement cyrcle
knitr::include_graphics("https://plan.io/images/blog/5-phases-of-IT-project-management.png?1722938257")
```

::: footer
[Plan.io](https://plan.io/blog/)
:::

## Tasks management

```{r}
#| label: tasks-management
knitr::include_graphics("https://plan.io/images/blog/what-is-task-management.png?1721728085")
```

::: footer
[Plan.io](https://plan.io/blog/what-is-task-management/)
::: 

## What is a task?

```{r}
#| label: task-definition
knitr::include_graphics("https://plan.io/images/blog/what-who-how.png?1722938252")
```

::: footer
[Plan.io](https://plan.io/blog/what-is-task-management/)
::: 

## Tasks management tools

[Jory MacKay](https://plan.io/blog/what-is-task-management/)

::: {.blockquote}
A ... **task management tool** ... is your best friend when it comes to organizing, assigning, tracking, and reporting on tasks.
:::

:::: {.columns .fragment}

::: {.column width="20%"}
:::

::: {.column width="60%"}
```{r}
#| label: task-management-tools
knitr::include_graphics("https://plan.io/images/blog/purpose-of-project-schedule.png?1722938242")
```
:::

::::

::: footer
[Plan.io](https://plan.io/blog/)
:::

## Best Practices

### [1. Split yout work into manageble chunks]{.text-color-highlight-secondary}

:::: {.columns .fragment}

::: {.column width="20%"}
:::

::: {.column width="60%"}

```{r}
#| label: task-mng-best-practices-split
knitr::include_graphics("https://plan.io/images/blog/break-down-projects.png?1721728085")
```

:::

::: {.column width="20%"}
:::

::::

::: footer
[Plan.io](https://plan.io/blog/)
:::

## Best Practices

### [2. Make your task atomic]{.text-color-highlight-secondary}

It should be clear what is the [**goal**]{.text-color-highlight-primary} and [**criteria**]{.text-color-highlight-tertiary} of the task.

<br>

:::: {.columns }

::: {.column width="20%"}
:::

::: {.column width="60%" .textcenter}
::: {.blockquote}
One chunk of work = one task
:::
:::

::::

## Best Practices

### [3. Set priority of tasks]{.text-color-highlight-secondary}

:::: {.columns .fragment}

::: {.column width="10%"}
:::

::: {.column width="70%"}

```{r}
#| label: task-mng-best-practices-prioritise
knitr::include_graphics("https://plan.io/images/blog/eisenhower-box.png?1721728085")
```

:::

::: {.column width="20%"}
:::

::::

::: footer
[Plan.io](https://plan.io/blog/)
:::

## Making a plan

```{r}
#| label: making-a-plan
knitr::include_graphics("https://plan.io/images/blog/creating-actionable-project-plans.png?1722938248")
```

::: footer
[Plan.io](https://plan.io/blog/)
:::

## Time management

Whole chapter in [project management]{.text-color-highlight-primary} is dedicated to [time management]{.text-color-highlight-secondary}.

:::: {.columns}

::: {.column width="50%" .fragment}

```{r}
#| label: pomodoro
knitr::include_graphics("https://luxafor.com/wp-content/uploads/2023/02/the-Pomodoro-Technique-3-1-1024x576.png")
```
:::

::: {.column width="49%" .fragment}
```{r}
#| label: time-blocking
knitr::include_graphics("https://plan.io/images/blog/time-blocking-visualization.png")
```
:::

::::

::: footer
[https://luxafor.com/](https://luxafor.com/pomodoro-technique-time-management-life-hack/) | [Plan.io](https://plan.io/blog/) 
:::

## [Practical Exercise]{.r-fit-text} {.exercise .textcenter}

`r countdown(minutes = 3)`

:::{.r-fit-text}
What tools and methods do you use?
:::

## Project management tools

There are many tools for project management!!!

::::: {.fragment}
### Google Keep

:::: {.columns}

::: {.column width="20%"}
:::

::: {.column width="60%"}
```{r}
#| label: project-management-tools
knitr::include_graphics("https://www.process.st/wp-content/uploads/2024/02/google-keep-homepage.png")
```
:::
::::
:::::

::: footer
[How to Use Google Keep to Create The Ultimate Task List](https://www.process.st/how-to-use-google-keep/)
:::

## GitHub tools suite

:::: {.columns}

::: {.column width="20%"}
```{r}
#| label: gh_logo
knitr::include_graphics("https://upload.wikimedia.org/wikipedia/commons/thumb/a/ae/Github-desktop-logo-symbol.svg/768px-Github-desktop-logo-symbol.svg.png")
```
:::

::: {.column width="80%"}
```{r}
#| label: project-management-tools-gh
include_local_figure("GH_management.png")
```
:::

::::

::: footer
[wiki](https://commons.wikimedia.org/wiki/File:Github-desktop-logo-symbol.svg) | [Getting started with project planning on GitHub](https://github.blog/developer-skills/github/getting-started-with-project-planning-on-github/)
:::

## Issue (a task) on GitHub

Original purpose of [GitHub Issues]{.text-color-highlight-primary} is to track bugs & feature requests in software developmen projects🧑‍💻.

However, We can highjack it for any kind of task management👌🦹.

:::: {.columns}

:::{.column width="10%"}
:::

:::{.column width="80%"}
```{r}
#| label: software-dev-life-cycle
knitr::include_graphics("https://miro.medium.com/v2/resize:fit:4800/format:webp/1*GU-YWDqM-ZljYHGs1iDNPg.jpeg")

```
:::
::::

::: footer
[Software development life-cycle (SDLC)](https://medium.com/@artjoms/software-development-life-cycle-sdlc-6155dbfe3cbc)
:::

## Issue (a task) on GitHub

```{r}
#| label: issue-on-GH
knitr::include_graphics("https://docs.github.com/assets/cb-66899/mw-1440/images/help/issues/issue-title-body.webp")
```

::: footer
[GitHub Docs](https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues)
:::

## Note on Markdown

:::: {.columns}

:::: {.column width="50%"}
You can use [Markdown]{.text-color-highlight-primary} in the description and comments

More details on [Github Docs](https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)
:::

::: {.column width="50%"}
```{r}
#| label: markdown-syntax-issue
include_local_figure("Markdown_syntax.png")
```
:::
::::

## Splitting tasks 

You can split tasks into [subtasks]{.text-color-highlight-primary} and [checklists]{.text-color-highlight-secondary}.

This allow to track progress more granularly.

```{r}
#| label: issue-on-GH-subtasks
knitr::include_graphics("https://docs.github.com/assets/cb-127397/mw-1440/images/help/writing/task-list-rendered.webp")
```

::: footer
[GitHub Docs](https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/about-task-lists)
:::

## Labels

You can use [labels]{.text-color-highlight-primary} to categorize tasks.

```{r}
#| label: issue-on-GH-labels
knitr::include_graphics("https://docs.github.com/assets/cb-120194/mw-1440/images/help/issues/issue-with-label.webp")
```

::: footer
[GitHub Docs](https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues)
:::

## Labels

::::{.columns}

:::{.column width="35%"}
Be crateative! You can create your own **labels** based on:

* [priority]{.text-color-highlight-primary}
* [type]{.text-color-highlight-secondary}
* [status]{.text-color-highlight-tertiary}
* ...
:::

:::{.column width="64%" .fragment}
```{r}
#| label: issue-on-GH-labels2
include_local_figure("gh_labels.png")
```
:::
::::

::: footer
[GitHub Docs](https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues)
:::

## Issues - Assign

```{r}
#| label: issue-on-GH-assign
knitr::include_graphics("https://docs.github.com/assets/cb-119861/mw-1440/images/help/issues/issue-assignees.webp")
```

::: footer
[GitHub Docs](https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues)
:::

## Issues - space for communication

```{r}
#| label: issue-on-GH-comments
knitr::include_graphics("https://rewind.com/wp-content/uploads/2021/03/G8oAt9b.png")
```

::: footer
[Rewind](https://rewind.com/blog/best-practices-for-using-github-issues/)
:::

## [Practical Exercise]{.r-fit-text} {.exercise .textcenter}

`r countdown(minutes = 3)`

::: {.r-fit-text}
1. Look up issues on your favourite software (e.g. R package)
2. Create an issue on your repo
3. Make a comment
:::

## Tracking progress - link PRs

[Issues]{.text-color-highlight-primary} can be linked to [Pull Requests]{.text-color-highlight-secondary}.

Link specific work with specific changes.

```{r}
#| label: issue-on-GH-PR
knitr::include_graphics("https://github.blog/wp-content/uploads/2020/02/issue-pull-request-link.png")
```

::: footer
[GitHub Docs](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword)
:::

## Tracking progress - link PRs

:::: {.columns}

::: {.column width="50%"}

When a PR is merged, the issue is closed automatically.

Use the word [`close`]{.text-color-highlight-secondary} or [`fix`]{.text-color-highlight-secondary} in the PR description to link it to the issue.

:::

::: {.column width="50%" }
```{r}
#| label: Link-PR
include_local_figure("issue_closed_by_PR_1.png")
```

::: {.fragment}
The issue is closed by the PR
```{r}
#| label: Link-PR2
include_local_figure("issue_closed_by_PR_2.png")
```
:::

:::
::::

## Tracking progress - Milestones

```{r}
#| label: milestones
knitr::include_graphics("https://plan.io/images/blog/project-timeline-with-milestones.png?1722938244")
```

::: footer
[Plan.io](https://plan.io/blog/)
:::

## Tracking progress - Milestones

```{r}
#| label: gh-milestones
knitr::include_graphics("https://docs.github.com/assets/cb-120118/mw-1440/images/help/issues/issue-milestone.webp")
```

::: footer
[GitHub Docs](https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/about-milestones)
:::

## Tracking progress - Milestones

You can create a Milestone for:

* [Time frame]{.text-color-highlight-primary} - "2024-10-12", "Conference XY", ...
* [Goal]{.text-color-highlight-secondary} - "Methodology refactor", "paper submission", ...
* [General topic]{.text-color-highlight-tertiary} - "Data cleaning", "Data analysis", ...

## GitHub Projects

```{r}
#| label: GH-project-tools
knitr::include_graphics("https://github.blog/wp-content/uploads/2022/02/GitHub-Issues-project-planning_banner.png")
```

::: footer
[GitHub Docs](https://github.com/features/issues)
:::

## GitHub Projects

You can organise your [Issues]{.text-color-highlight-primary} and [Pull Requests]{.text-color-highlight-secondary} in [Projects]{.text-color-highlight-tertiary}.

```{r}
#| label: GH-projects
knitr::include_graphics("https://docs.github.com/assets/cb-108386/mw-1440/images/help/projects/priority-example.webp")
```

::: footer
[GitHub Docs](https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/quickstart-for-projects)
:::

## GitHub Projects

:::: {.columns}

::: {.column width="40%"}
You can customise the [columns]{.text-color-highlight-primary} in [Projects]{.text-color-highlight-secondary} with:
 
* [Labels]{.text-color-highlight-tertiary}
* [Linked Pull Requests]{.text-color-highlight-tertiary}
* [Milestones]{.text-color-highlight-tertiary}
* ...
:::

::: {.column width="60%"}
```{r}
#| label: GH-projects-columns
knitr::include_graphics("https://github.githubassets.com/assets/issue-custom-fields-reduced-motion-dd7b91ab2517.jpg")
```
:::
::::

::: footer
[GitHub Docs](https://github.com/features/issues)
:::

## GitHub Projects - custom views

```{r}
#| label: GH-projects-custom-views
knitr::include_graphics("https://github.githubassets.com/assets/memex-table-slice-dark-8fde73579a0b.png")
```

::: footer
[GitHub Docs](https://github.com/features/issues)
:::

## GitHub Projects - custom views

```{r}
#| label: GH-projects-custom-views2
knitr::include_graphics("https://github.githubassets.com/assets/memex-board-dark-48efb683527e.png")
```

::: footer
[GitHub Docs](https://github.com/features/issues)
:::

## GitHub Projects 

There is so much more you can do with [Projects]{.text-color-highlight-primary}:

* [Automations]{.text-color-highlight-secondary}
* [Road maps]{.text-color-highlight-tertiary}
* ...

Check the [official documentation](https://github.com/features/issues)


## [Practical Exercise]{.r-fit-text} {.exercise .textcenter}

`r countdown(minutes = 3)`

::: {.r-fit-text}
1. Make some Issues in your repo
2. Organise them in a Project
:::

## [Additional functions]{.r-fit-text} {.subtitle .textcenter}

[of GitHub]{.r-fit-text}

## Discussions

Project-specific space for [communication]{.text-color-highlight-primary} on GitHub.

```{r}
#| label: GH-discussions
knitr::include_graphics("https://github.githubassets.com/assets/overview-d34a37d61239.png")
```

::: footer
[GitHub Docs](https://github.com/features/discussions)
:::

## Discussions

:::: {.columns}

::: {.column width="50%"}
Threads

```{r}
#| label: GH-discussions-threads
include_local_figure("gh_dicussion_threads.png")
```

:::

::: {.column width="49%" .fragment}
Pools

```{r}
#| label: GH-discussions-pools
include_local_figure("gh_dicussion_pools.png")
```

:::

::::

::: footer
[GitHub Docs](https://github.com/features/discussions)
:::

## Discussions

From [Discussions]{.text-color-highlight-primary} to [Issues]{.text-color-highlight-secondary}.

:::: {.columns}

::: {.column width="49%"}
```{r}
#| label: GH-discussions-to-issues
include_local_figure("gh_dicussion_to_issue_A.png")
```
:::

::: {.column width="50%" .fragment}

```{r}
#| label: GH-discussions-to-issues2
include_local_figure("gh_dicussion_to_issue_B.png")
```
:::
::::

::: footer
[GitHub Docs](https://github.com/features/discussions)
:::

## Wikis

```{r}
#| label: GH-wiki
knitr::include_graphics("https://github.blog/wp-content/uploads/2014/05/b6d486e6-d09c-11e3-9fd1-1bc80fb64371.png")
```

::: footer
[GitHub Docs](https://docs.github.com/en/communities/documenting-your-project-with-wikis/about-wikis)
:::

## [Practical Exercise]{.r-fit-text .textcenter} {.exercise }

:::{.r-fit-text .textcenter}
Brainstorm on how you could use Discussions and Wikis in 
:::

1. your current projects
2. future projects

`r countdown(minutes = 3)`

## Team administration

:::: {.columns}

::: {.column width="39%"}

```{r}
#| label: ResearchTools
include_local_figure("ResearchTools.jpg")
```
:::

::: {.column width="60%" .fragment}

```{r}
#| label: GH-team-admin
knitr::include_graphics("https://nap.nationalacademies.org/openbook/25568/xhtml/images/img-98.jpg")
```
:::

::::

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807) | [Mentorship Structures](https://nap.nationalacademies.org/read/25568/chapter/6)
:::

## Team administration

Github allows you to manage your team by specifying [roles]{.text-color-highlight-primary} and [permissions]{.text-color-highlight-secondary}.

```{r}
#| label: GH-team-admin-roles
include_local_figure("GH_team_admin.png")
```

::: footer
[GitHub Docs](https://github.com/features/#features-team-administration)
:::

## Team administration

```{r}
#| label: GH-team-admin-roles2
knitr::include_graphics("https://github.blog/wp-content/uploads/2023/08/image2.png")
```

::: footer
[Best practices for organizations and teams using GitHub Enterprise Cloud](https://github.blog/enterprise-software/devops/best-practices-for-organizations-and-teams-using-github-enterprise-cloud/)
:::

## Team administration - Roles

```{r}
#| label: GH-team-admin-roles3
knitr::include_graphics("https://cdn.prod.website-files.com/65cb70dea86ef31d62e7ad25/65dc9790deb55bea60f20179_630d23aa00443e4276226ebd_pre-defined_roles_f859b878b8d94a5a98737bd2c66493e2_1000.png")
```

::: footer
[GitHub Advanced Security — Secret Scanning](https://www.liatrio.com/resources/blog/github-advanced-security-secret-scanning)
:::

## Team administration - Mentoring

:::: {.columns}

::: {.column width="34%"}
```{r}
#| label: GH-team-admin-roles-teaching
include_local_figure("CommunityNetwork.jpg")
```
:::

::: {.column width="65%" .fragment}

```{r}
#| label: GH-team-admin-roles-teaching2
include_local_figure("FirstPullRequest.jpg")
```
:::

::::

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

## [Practical Exercise]{.r-fit-text} {.exercise .textcenter}

:::{.r-fit-text}
How would you desing a roles for your team/project?
:::

`r countdown(minutes = 3)`

## Dissemintation

```{r}
#| label: sharing
knitr::include_graphics("https://ecdn.teacherspayteachers.com/thumbitem/Sharing-Taking-Turns-Social-Story-Sharing-is-Caring-2116795-1657562183/original-2116795-1.jpg
")
```

::: footer
[https://www.teacherspayteachers.com/](https://www.teacherspayteachers.com/Product/Sharing-Taking-Turns-Social-Story-Sharing-is-Caring-2116795?st=28217229556fa41179351fd430c2ca9c)
:::

## Dissemintation

```{r}
#| label: publishing-scheme
include_local_figure("Ten Simple Rules for Taking Advantage of Git and GitHub.png")
```

::: footer
[Ten Simple Rules for Taking Advantage of Git and GitHub](http://dx.doi.org/10.1371/journal.pcbi.1004947)
:::

## Dissemintation

GitHub uses [git Tag]() and expand on it with [Releases]().

:::: {.columns}

::: {.column width="45%"}
A [Tag]{.text-color-highlight-primary} is a "frozen" state of repo at a certain time

```{r}
#| label: git-tag
knitr::include_graphics("https://miro.medium.com/v2/resize:fit:720/format:webp/1*34EO-6Ra2ath8-p4iBQBRQ.png")
```

:::

::: {.column width="45%" .fragment}
A [Release]{.text-color-highlight-secondary}, based on a [Tag]{.text-color-highlight-primary}, "packs" the whole repo into [downloadable zip]{.text-color-highlight-tertiary} (with docs)

```{r}
#| label: git-release
knitr::include_graphics("https://github.blog/wp-content/uploads/2021/10/GitHub-new-releases-screenshot.png?resize=1024%2C772?w=1024")
```

:::

::::

::: footer
[Git Tag - All You Need to Know](https://medium.com/@basecs101/git-tag-all-you-need-to-know-latest-be443ae90bb9) | [GitHub Docs](https://github.blog/news-insights/product-news/beta-github-releases-improving-release-experience/)
:::

## Dissemintation - GitHub + ZENODO

Get [DOI]{.text-color-highlight-primary} for your code and data with [Zenodo]{.text-color-highlight-secondary}.

:::: {.columns}
::: {.column width="20%"}

```{r}
#| label: zenodo-gh-love
knitr::include_graphics("https://conservationbytes.com/wp-content/uploads/2021/11/zenodolovesgithub.png")
```
:::

::: {.column width="80%"}

```{r}
#| label: zenodo-gh-love2
include_local_figure("zenodo-gh.png")
```
:::

::::

::: footer
[Want a permanent DOI assigned to your data and code?](https://conservationbytes.com/2021/11/02/want-a-permanent-doi-assigned-to-your-data-and-code-follow-this-simple-recipe/) | [Zenodo](https://zenodo.org/)
:::


## GitHub Actions

Automate your works🤖!

Create a custom small program that will run on GitHub servers.

```{r}
#| label: GH-actions
knitr::include_graphics("https://docs.github.com/assets/cb-25535/mw-1440/images/help/actions/overview-actions-simple.webp")
```

## GitHub Actions

Usage examples:

:::: {.columns}

::: {.column width="35%" .incremental}

* run your script every day (e.g. to update data)
* run your tests every time you push new code/data
* render your website every time you update your content
* ...

:::

::: {.column width="60%" .fragment}

```{r}
#| label: GH-actions2
include_local_figure("gh_action_example.png")
```
:::

::::

# [Functional programming]{.bold .r-fit-text} {.title}

## What is a `function` in R?

<br>

::: {.blockquote}
A function is a block of code which only runs when it is called.
:::

<br>

::: {.fragment}
```{r}
#| label: basic-function-example
#| echo: true
mean(x = c(1, 2, 3, 4, 5))
```
:::

::: {.fragment}
```{r}
#| label: basic-function-example2
#| echo: true
#| eval: false
function (x, trim = 0, na.rm = FALSE, ...) 
{
    if (!is.numeric(x) && !is.complex(x) && !is.logical(x)) {
        warning("argument is not numeric or logical: returning NA")
        return(NA_real_)
    }
    if (isTRUE(na.rm)) 
        x <- x[!is.na(x)]
    if (!is.numeric(trim) || length(trim) != 1L) 
        stop("'trim' must be numeric of length one")
    n <- length(x)
    if (trim > 0 && n) {
        if (is.complex(x)) 
            stop("trimmed means are not defined for complex data")
        if (anyNA(x)) 
            return(NA_real_)
        if (trim >= 0.5) 
            return(stats::median(x, na.rm = FALSE))
        lo <- floor(n * trim) + 1
        hi <- n + 1 - lo
        x <- sort.int(x, partial = unique(c(lo, hi)))[lo:hi]
    }
    .Internal(mean(x))
}
```
:::

## Parameters / Arguments

<br>

::: {.blockquote}
You can pass data, known as parameters/arguments, into a function.
:::

<br>

::: {.fragment}
```{r}
#| label: basic-param-example
#| echo: true
seq(
  from = 1,
  to = 10,
  by = 2
)
```
:::

## Arguments matching

```{r}
#| label: argument-matching-1
#| echo: true
# create some data
mydata <- rnorm(100)
```

<br>

::: {.fragment}
```{r}
#| label: argument-matching-2
#| echo: true
sd(mydata)
```
:::

::: {.fragment}
```{r}
#| label: argument-matching-3
#| echo: true
sd(x = mydata)
```
:::

::: {.fragment}
```{r}
#| label: argument-matching-4
#| echo: true
sd(x = mydata, na.rm = FALSE)
```
:::

::: {.fragment}
```{r}
#| label: argument-matching-5
#| echo: true
sd(na.rm = FALSE, x = mydata)
```
:::

::: {.fragment}
```{r}
#| label: argument-matching-6
#| echo: true
sd(na.rm = FALSE, mydata)
```
:::

## Creating a function - reason

```{r}
#| label: create-function-reason-1
#| echo: true
a <- rnorm(5)
b <- rnorm(5)
c <- rnorm(5)
d <- rnorm(5)
```

<br>

::: {.fragment}
```{r}
#| label: create-function-reason-2
#| echo: true
#| eval: false
(a - min(a)) / (max(a) - min(a))
(b - min(b)) / (max(b) - min(b))
(c - min(c)) / (max(c) - min(c))
(d - min(d)) / (max(d) - min(d))  
```
:::

<br>

::: {.fragment}

```{r}
#| label: create-function-reason-3
#| echo: true
#| eval: false
(█ - min(█)) / (max(█) - min(█))
```
:::

::: {.fragment}
If you have to repeat the **same code** [more than twice]{.text-color-highlight-primary}, it is a good idea to create a [function]{.text-color-highlight-secondary}.
:::

## Creating a function

```{r}
#| label: create-function
#| eval: false
#| echo: true
my_function <- function(<arguments>) {
  ## Do something interesting
}
```

<br>

::: {.fragment}
```{r}
#| label: create-function-example
#| echo: true
rescale_to_01 <- function(x) {
  (x - min(x)) / (max(x) - min(x))
}
```
:::

<br>

::: {.fragment}
```{r}
#| label: create-function-example2
#| echo: true
rescale_to_01(c(-10, 0, 10))
```
:::

## [Practical Exercise]{.r-fit-text} {.exercise .textcenter}

:::{.r-fit-text}
1. What are your experiences with making functions?
2. How can we improve the function `rescale_to_01`?
:::

```{r}
#| label: create-function-exercise
#| echo: true
rescale_to_01 <- function(x) {
  (x - min(x)) / (max(x) - min(x))
}
```

<br>

::: {.fragment}
```{r}
#| label: create-function-exercise2
#| echo: true
rescale_to_01 <- function(x) {
  x_range <- 
    range(x, na.rm = TRUE, finite = TRUE)
  res <- 
    (x - x_range[1]) / (x_range[2] - x_range[1])
  return(res)
}
```
:::

`r countdown(minutes = 3)`

## Functionals

```{r}
#| label: functional-meme
include_local_figure("functional_meme.png")
```

::: footer
[https://www.reddit.com/r/ProgrammerHumor/](https://www.reddit.com/r/ProgrammerHumor/comments/a5ggzi/functions/)
:::


## Functionals

:::: {.columns}

::: {.column width="50%"}

A [functional]{.text-color-highlight-primary} is a [function]{.text-color-highlight-secondary} that 

::: {.incremental}
* takes a [function]{.text-color-highlight-secondary} as an **input** 
* and returns a [vector]{.text-color-highlight-terciary} as **output**
:::

:::

::: {.column width="45%" .fragment}
```{r}
#| label: functional-programming
knitr::include_graphics("https://d33wubrfki0l68.cloudfront.net/1dff819e743f280bbab1c55f8f063e60b6a0d2fb/2269e/diagrams/fp.png")
```
:::
::::

<br>

::: {.fragment}
Bjarne Stroustrup: 

::: {.blockquote}
To become significantly more reliable, code must become more transparent. In particular, nested conditions and loops must be viewed with great suspicion. Complicated control flows confuse programmers. Messy code often hides bugs.
:::
:::

::: footer
[Advanced R](https://adv-r.hadley.nz/fp.html)
:::

## {purrr} package

```{r}
#| label: purrr-package
knitr::include_graphics("https://purrr.tidyverse.org/logo.png")
```

::: footer
[purrr.tidyverse.org](https://purrr.tidyverse.org/)
:::

## `purrr::map()`

```{r}
#| label: purrr-map-vis
knitr::include_graphics("https://d33wubrfki0l68.cloudfront.net/f0494d020aa517ae7b1011cea4c4a9f21702df8b/2577b/diagrams/functionals/map.png")
```

::: footer
[Advanced R](https://adv-r.hadley.nz/functionals.html)
:::

## `purrr::map()` - name?

Why `map()`?

::: {.fragment}
From Math:

::: {.blockquote}
an operation that associates each element of a given set with one or more elements of a second set
:::
:::

## `purrr::map()`

```{r}
#| label: purrr-map-example-1
#| echo: true
add_1 <- function(x){
  return(x + 1)
} 

```

<br>

::: {.fragment}

```{r}
#| label: purrr-map-example-2
#| echo: true
purrr::map(
  .x = 1:3, 
  .f = add_1
  )
```
:::

## `purrr::map()`

`purrr::map()` returns list. There are other variants `purrr::map` that return different types of objects.

* `purrr::map_dbl()` returns a numeric vector
* `purrr::map_chr()` returns a character vector
* `purrr::map_lgl()` returns a logical vector
* `purrr::map_int()` returns an integer vector

<br>

::: {.fragment}
```{r}
#| label: purrr-map-example-3
#| echo: true
purrr::map_dbl(
  .x = 1:3, 
  .f = add_1
  )
```
:::

## `purrr::map()`

```{r}
# | label: purrr-map-vis-2
knitr::include_graphics("https://d33wubrfki0l68.cloudfront.net/12f6af8404d9723dff9cc665028a35f07759299d/d0d9a/diagrams/functionals/map-list.png")
```

::: footer
[Advanced R](https://adv-r.hadley.nz/functionals.html)
:::

## `purrr::map()`

```{r}
#| label: purrr-map-example-4
#| echo: true
my_list <-
  list(
    x = rnorm(5),
    y = rnorm(5),
    z = rnorm(5)
  ) 
```

<br>

::: {.fragment}

```{r}
#| label: purrr-map-example-5
#| echo: true
purrr::map_dbl(
  .x = my_list, 
  .f = mean
  )
```
:::

## `purrr::map()` - Anonymous functions

```{r}
#| label: purrr-map-anon-1
#| echo: true
get_length_of_unique <- function(x){
  unique(x)  %>% 
    length()  %>% 
    return()
}

purrr::map_dbl(
  .x = mtcars, 
  .f = get_length_of_unique
  )
```

<br>

::: {.fragment}
The magic of `~` ([tilde operator]{.text-color-highlight-primary}):

```{r}
#| label: purrr-map-anon-2
#| echo: true
purrr::map_dbl(
  .x = mtcars,
  .f = ~ unique(.x) %>%
    length()
)
```
:::

## `purrr::map()` - Anonymous functions

Tilde can be also used to combine custom and base functions.

```{r}
#| label: purrr-map-anon-3
#| echo: true
purrr::map_dbl(
  .x = list(
    x = rnorm(5),
    y = rnorm(5),
    z = rnorm(5)
  ),
  .f = ~ add_1(.x) %>%
    mean()
)
```

## Functional workflow - example

The data will be using Palmer's `penguins` dataset.

:::: {.columns}

::: {.column width="30%"}

```{r}
#| label: purrr-advanced-data
knitr::include_graphics("https://allisonhorst.github.io/palmerpenguins/reference/figures/palmerpenguins.png")
```

:::

::: {.column width="65%"}

```{r}
#| label: purrr-advanced-data2
knitr::include_graphics("https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png")
```
:::

::::

::: footer
[Palmer penguins dataset](https://allisonhorst.github.io/palmerpenguins/)
:::

## Functional workflow - example

```{r}
#| label: purrr-advanced-data3
#| echo: true
library(palmerpenguins)
head(penguins)
```

## Functional workflow - example

The goal is to plot the relationship between `bill_length_mm` and `bill_depth_mm` for each species.

```{r}
#| label: purrr-advanced-data4
knitr::include_graphics("https://allisonhorst.github.io/palmerpenguins/reference/figures/culmen_depth.png")
```

::: footer
[Palmer penguins dataset](https://allisonhorst.github.io/palmerpenguins/)
:::

## Functional workflow - example

```{r}
#| label: purrr-advanced
#| echo: true
data_penguins_by_species <-
  penguins %>%
  tidyr::nest(data_nested = -species)
```

<br>

::: {.fragment}
```{r}
#| label: purrr-advanced2
#| echo: true
print(data_penguins_by_species)
```
:::

## Functional workflow - example {auto-animate="true"}

```{r}
#| label: purrr-advanced3
#| echo: true
data_penguins_by_species_lm <-
  data_penguins_by_species %>%
  dplyr::mutate(
    model = purrr::map(
      .x = data_nested,
      .f = ~ stats::lm(bill_length_mm ~ bill_depth_mm, data = .x)
    )
  )
```

## Functional workflow - example {auto-animate="true"}

```{r}
#| label: purrr-advanced4
#| echo: true
data_penguins_by_species_lm <-
  data_penguins_by_species %>%
  dplyr::mutate(
    model = purrr::map(
      .x = data_nested,
      .f = ~ stats::lm(bill_length_mm ~ bill_depth_mm, data = .x)
    ),
    model_coef = purrr::map(
      .x = model,
      .f = ~ stats::coef(.x)
    )
  )
```

## Functional workflow - example {auto-animate="true"}

```{r}
#| label: purrr-advanced5
#| echo: true
data_penguins_by_species_lm <-
  data_penguins_by_species %>%
  dplyr::mutate(
    model = purrr::map(
      .x = data_nested,
      .f = ~ stats::lm(bill_length_mm ~ bill_depth_mm, data = .x)
    ),
    model_coef = purrr::map(
      .x = model,
      .f = ~ stats::coef(.x)
    ),
    plot = purrr::map2(
      .x = data_nested,
      .y = model_coef,
      .f = ~ ggplot2::ggplot(
        data = .x,
        mapping = ggplot2::aes(x = bill_depth_mm, y = bill_length_mm)
      ) +
        ggplot2::geom_point() +
        ggplot2::geom_abline(
          intercept = .y[[1]],
          slope = .y[[2]],
          col = "red"
        ) +
        ggplot2::coord_cartesian(
           xlim = range(penguins$bill_depth_mm, na.rm = TRUE),
          ylim = range(penguins$bill_length_mm, na.rm = TRUE)
        ) 
    )
  )
```

## Functional workflow - example

```{r}
#| label: purrr-advanced6
#| echo: true
print(data_penguins_by_species_lm)
```

<br>

::: {.fragment}

```{r}
#| label: purrr-advanced7
#| echo: true
#| fig.height: 2
ggpubr::ggarrange(
  plotlist = data_penguins_by_species_lm$plot,
  labels = data_penguins_by_species_lm$species,
  ncol = 3
)
```

:::

## Functional workflow - example 

Figure with a single call.

```{r}
#| label: purrr-advanced8
#| echo: true
#| eval: false
fig_penguins_beak_lm <-
 penguins %>%
  tidyr::nest(data_nested = -species)
  dplyr::mutate(
    model = purrr::map(
      .x = data_nested,
      .f = ~ stats::lm(bill_length_mm ~ bill_depth_mm, data = .x)
    ),
    model_coef = purrr::map(
      .x = model,
      .f = ~ stats::coef(.x)
    ),
    plot = purrr::map2(
      .l = list(
        data_nested,
        model_coef,
        species
      ),
      .f = ~ ggplot2::ggplot(
        data = ..1,
        mapping = ggplot2::aes(x = bill_depth_mm, y = bill_length_mm)
      ) +
        ggplot2::geom_point() +
        ggplot2::geom_abline(
          intercept = ., 2[[1]],
          slope = ..2[[2]],
          col = "red"
        ) +
        ggplot2::coord_cartesian(
           xlim = range(penguins$bill_depth_mm, na.rm = TRUE),
          ylim = range(penguins$bill_length_mm, na.rm = TRUE)
        ) +
        ggplot2::labs(
          title = ..3
        )
    )
  ) %>%
  purrr::chuck("plot") %>%
  ggpubr::ggarrange(
    plotlist = .,
    ncol = 3
  )
```

## [Practical Exercise]{.r-fit-text} {.exercise .textcenter}

:::{.r-fit-text}
1. What are your experiences with Functional programming?
2. What are the advantages?
3. What are the limitations?
:::

::: {.r-fit-text .fragment}
bonus: What was statisically incorrect in the example?
::: 

`r countdown(minutes = 3)`

## [Functional project]{.r-fit-text} {.subtitle .textcenter}

## Functional project

We wrote a very usefull function that loads and cleans a csv file.

```{r}
#| label: f-project-reason-fc_example
#| echo: true
#| eval: false
load_and_clean_csv <- function(file_name){
  file_name  %>% 
    readr::read_csv(file = .) %>%
    janitor::clean_names()  %>% 
    return()
}
```

## Functional project

```{r}
#| eval: false
#| echo: true
# .
# └─my_awesome_project/
#   ├─ Data/
#   |   ├─ Input/
#   |   |  ├─ vegetation_lowlands.csv
#   |   |  └─ vegetation_highlands.csv
#   |   └─ Processed/
#   ├─ R/
#   |   ├─ 01_Estimate_diversity.R
#   |   └─ 02_Fit_diversity_model.R
```

:::: {.columns}

::: {.column width="49%" .fragment}
```{r}
#| label: f-project-reason-diversity-1
#| echo: true
#| eval: false
#| code-line-numbers: "|5-9"
# 01_Estimate_diversity.R:
# <Header>

# define helper function
load_and_clean_csv <- function(file_name){
  file_name  %>% 
    readr::read_csv(file = .) %>%
    janitor::clean_names()  %>% 
    return()
}

# load data
data_vegetation_lowlands <- 
  load_and_clean_csv("Data/Input/vegetation_lowlands.csv")

data_vegetation_highlands <- 
  load_and_clean_csv("Data/Input/vegetation_highlands.csv")

# <Estimate diversity> ...
```

:::

::: {.column width="50%" .fragment}
```{r}
#| label: f-project-reason-model-1
#| echo: true
#| eval: false
#| code-line-numbers: "|5-9"
# 02_Fit_diversity_model.R:
# <Header>

# define helper function
load_and_clean_csv <- function(file_name){
  file_name  %>% 
    readr::read_csv(file = .) %>%
    janitor::clean_names()  %>% 
    return()
}

# load data
data_diversity_lowlands <- 
  load_and_clean_csv("Data/Processed/diversity_lowlands.csv")

data_diversity_highlands <-
  load_and_clean_csv("Data/Processed/diversity_highlands.csv")

# <Fit models> ...
```
:::
::::

## Functional project

Now we want to edit the function to also include {here} package.

::: {.fragment}

```{r}
#| label: f-project-reason-fc_example2
#| echo: true
#| eval: false
#| code-line-numbers: "|3"
load_and_clean_csv <- function(file_name){
  file_name  %>% 
    here::here() %>%
    readr::read_csv(file = .) %>%
    janitor::clean_names()
}
```
:::

::: {.fragment}
We would need to edit the function in [every]{.text-color-highlight-primary} script!!
:::

## [Practical Exercise]{.r-fit-text} {.exercise .textcenter}

:::{.r-fit-text}
How would you solve the problem with the function?
:::

`r countdown(minutes = 3)`

## Functional project

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|12"
# .
# └─my_awesome_project/
#   ├─ Data/
#   |   ├─ Input/
#   |   |  ├─ vegetation_lowlands.csv
#   |   |  └─ vegetation_highlands.csv
#   |   └─ Processed/
#   ├─ R/
#   |   ├─ 01_Estimate_diversity.R
#   |   └─ 02_Fit_diversity_model.R
#   |   └─ Functions/
#   |       └─ load_and_clean_csv.R
```

:::: {.columns}

::: {.column width="49%"}
```{r}
#| label: f-project-reason-diversity-2
#| echo: true
#| eval: false
#| code-line-numbers: "|4-8"
# 01_Estimate_diversity.R:
# <Header>

source(
  here::here(
    "R/Functions/load_and_clean_csv.R"
    )
)

# load data
data_vegetation_lowlands <- 
  load_and_clean_csv("Data/Input/vegetation_lowlands.csv")

data_vegetation_highlands <- 
  load_and_clean_csv("Data/Input/vegetation_highlands.csv")

# <Estimate diversity> ...
```

:::

::: {.column width="50%"}
```{r}
#| label: f-project-reason-model-2
#| echo: true
#| eval: false
#| code-line-numbers: "|4-8"
# 02_Fit_diversity_model.R:
# <Header>

source(
  here::here(
    "R/Functions/load_and_clean_csv.R"
    )
)

# load data
data_diversity_lowlands <- 
  load_and_clean_csv("Data/Processed/diversity_lowlands.csv")

data_diversity_highlands <-
  load_and_clean_csv("Data/Processed/diversity_highlands.csv")

# <Fit models> ...
```
:::
::::

## Functional project 

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|9,13-15"
# .
# └─my_awesome_project/
#   ├─ Data/
#   |   ├─ Input/
#   |   |  ├─ vegetation_lowlands.csv
#   |   |  └─ vegetation_highlands.csv
#   |   └─ Processed/
#   ├─ R/
#   |   ├─ 00_Config_file.R
#   |   ├─ 01_Estimate_diversity.R
#   |   └─ 02_Fit_diversity_model.R
#   |   └─ Functions/
#   |       ├─ fit_linear_model.R
#   |       ├─ load_and_clean_csv.R
#   |       └─ plot_regression.R
```

:::: {.columns}

::: {.column width="49%"}
```{r}
#| label: f-project-reason-diversity-3
#| echo: true
#| eval: false
#| code-line-numbers: "|4-6"
# 01_Estimate_diversity.R:
# <Header>

source(
  here::here("00_Config_file.R")
)

# load data
data_vegetation_lowlands <- 
  load_and_clean_csv("Data/Input/vegetation_lowlands.csv")

data_vegetation_highlands <- 
  load_and_clean_csv("Data/Input/vegetation_highlands.csv")

# <Estimate diversity> ...
```

:::

::: {.column width="50%"} 
```{r}
#| label: f-project-reason-model-3
#| echo: true
#| eval: false
#| code-line-numbers: "|4-6"
# 02_Fit_diversity_model.R:
# <Header>

source(
  here::here("00_Config_file.R")
)

# load data
data_diversity_lowlands <- 
  load_and_clean_csv("Data/Processed/diversity_lowlands.csv")

data_diversity_highlands <-
  load_and_clean_csv("Data/Processed/diversity_highlands.csv")

# <Fit models> ...
```
:::
::::

## [Reproducible pipeline]{.r-fit-text} {.subtitle .textcenter}

## Reproducible pipeline/workflow

```{r}
#| label: reproducible-pipeline
include_local_figure("what-is-a-workflow.png")
```

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

## {targets} package

```{r}
#| label: targets-package
knitr::include_graphics("https://docs.ropensci.org/targets/logo.svg")
```

::: footer
[targets package](https://docs.ropensci.org/targets/)
:::

## Example pipeline

<br>

::: {.fragment}
```{mermaid}
flowchart LR
    A(Load data) --> B(Fit model)
    B --> C(Plot results)
```
:::

## Example pipeline 

:::: {.columns}

::: {.column width="33%"}
```{mermaid}
flowchart LR
    A(Load data)
```

::: {.fragment}
```{r}
#| label: targets_ex_load_1
#| echo: true
#| eval: false
#| output: false
# 01_Load_and_clean_data.R:
# <Header>
library(tidyverse)
library(palmerpenguins)
library(janitor)

# load and clean
data_penguins_clean <-
  palmerpenguins::path_to_file("penguins_raw.csv")  %>% 
  readr:::read_csv()  %>%
  janitor::clean_names()

# check data
dplyr::glimpse(data_penguins_clean)

# Save data
data_penguins_clean  %>% 
  readr::write_csv(
    here::here("penguins_clean.csv")
  )
```
:::

:::

::: {.column width="33%"}
```{mermaid}
flowchart LR
    B(Fit model)
```

::: {.fragment}
```{r}
#| label: targets_ex_fit_1
#| echo: true
#| eval: false
# 02_Fit_model.R:
# <Header>
library(tidyverse)

# load data
data_penguins_clean <-
  readr::read_csv(
    here::here("penguins_clean.csv")
  )

# fit model
mod_penguins <-
  stats::lm(
    culmen_length_mm ~ culmen_depth_mm,
    data = data_penguins_clean
    )

# save results
mod_penguins  %>% 
  readr::write_rds(
    here::here("penguins_mod.rds")
  )
```
:::
:::

::: {.column width="33%"}
```{mermaid}
flowchart LR
    C(Plot results)
```

::: {.fragment}
```{r}
#| label: targets_ex_plot_1
#| echo: true
#| eval: false
# 03_Plot_results.R:
# <Header>
library(tidyverse)

# load data
mod_penguins <-
  readr::read_rds(
    here::here("penguins_mod.rds")
  )

# make plot
fig_penguins <-
  ggplot2::fortify(mod_penguins) %>%
  ggplot2::ggplot(
    mapping = ggplot2::aes(
      x = culmen_depth_mm,
      y = culmen_length_mm
    )
  ) +
  ggplot2::geom_point() +
  ggplot2::geom_line(
    mapping = ggplot2::aes(
      y = .fitted
    ),
    col = "red"
  )

# save plot
ggplot2::ggsave(
  plot = fig_penguins,
  filename = here::here("penguins_plot.png")
  )
```
:::
:::
::::

## Example pipeline - using {targets}

```{r}
#| label: targets_ex_pipeline_1
#| echo: true
#| eval: false
#| code-line-numbers: "|8-10|12-14|16-18|"
# _targest.R:
# <Header>
library(tidyverse)
library(palmerpenguins)
library(janitor)

list(
  targets::tar_target(
    name = "data_penguins_clean",
    command = load_and_clean_data("penguins_raw.csv")
  ),
  targets::tar_target(
    name = "mod_penguins",
    command = fit_model(data_penguins_clean)
  ),
  targets::tar_target(
    name = "fig_penguins",
    command = plot_results(mod_penguins)
  )
)
```

```{r}
#| label: targets_ex_pipeline_1_real
#| echo: false
#| eval: true
#| output: false
temp_script <-
  paste0(
    tempdir(),
     "/penguins_target.R"
     )
  
targets::tar_script(
  script = temp_script,
  code = {
    suppressPackageStartupMessages(
      {
        library(tidyverse)
        library(palmerpenguins)
        library(janitor)
      }
    )

    load_and_clean_data <- function(file_name) {
      palmerpenguins::path_to_file(file_name) %>%
        readr::read_csv(
          .,
          show_col_types = FALSE) %>%
        janitor::clean_names() %>%
        return()
    }

    fit_model <- function(data_source) {
      stats::lm(
        culmen_length_mm ~ culmen_depth_mm,
        data = data_source
      ) %>%
        return()
    }

    plot_results <- function(model) {
      ggplot2::fortify(model) %>%
        ggplot2::ggplot(
          mapping = ggplot2::aes(
            x = culmen_depth_mm,
            y = culmen_length_mm
          )
        ) +
        ggplot2::geom_point() +
        ggplot2::geom_line(
          mapping = ggplot2::aes(
            y = .fitted
          ),
          col = "red"
        ) %>%
        return()
    }

    list(
      targets::tar_target(
        name = "data_penguins_clean",
        command = load_and_clean_data("penguins_raw.csv")
      ),
      targets::tar_target(
        name = "mod_penguins",
        command = fit_model(data_penguins_clean)
      ),
      targets::tar_target(
        name = "fig_penguins",
        command = plot_results(mod_penguins)
      )
    )
  },
  ask = FALSE
)

# make sure that there is no previous target
targets::tar_destroy(
  script = temp_script,
  verbose = FALSE,
  ask = FALSE
)
```

::: {.fragment}
```{r}
#| label: targets_ex_pipeline_2
#| echo: true
#| eval: false
targets::tar_make()
```

```{r}
#| label: targets_ex_pipeline_2_real
#| echo: false
#| eval: true
#| output: true
targets::tar_make(
  script = temp_script
)
```
:::

## Example pipeline - using {targets}

```{r}
#| label: targets_ex_pipeline_3
#| echo: true
#| eval: false
targets::tar_visnetwork()
```

::: {.fragment}
```{r}
#| label: targets_ex_pipeline_3_real
#| echo: false
#| eval: true
#| output: true
targets::tar_visnetwork(
   script = temp_script
     )
```
:::

## Example pipeline - using {targets} {auto-animate="true"}

Now edit the `fit_model()` function.

```{r}
#| label: targets_ex_pipeline_4
#| echo: true
#| eval: false
# fit_model.R:
# <Header>
fit_model <- function(data_source) {
      stats::lm(
        culmen_length_mm ~ culmen_depth_mm,
        data = data_source
      ) %>%
        return()
    }
```

## Example pipeline - using {targets} {auto-animate="true"}

Now edit the `fit_model()` function.

```{r}
#| label: targets_ex_pipeline_4b
#| echo: true
#| eval: false
#| code-line-numbers: "4,7"
# fit_model.R:
# <Header>
fit_model <- function(data_source) {
      stats::glm(
        culmen_length_mm ~ culmen_depth_mm,
        data = data_source,
        family = stats::Gamma(link = "log")
      ) %>%
        return()
    }
```

## Example pipeline - using {targets} 

```{r}
#| label: targets_ex_pipeline_5
#| echo: true
#| eval: false
targets::tar_visnetwork()
```

::: {.fragment}
```{r}
#| label: targets_ex_pipeline_5_real
#| echo: false
#| eval: true
#| output: true
targets::tar_script(
  script = temp_script,
  code = {
    suppressPackageStartupMessages(
      {
        library(tidyverse)
        library(palmerpenguins)
        library(janitor)
      }
    )

    load_and_clean_data <- function(file_name) {
      palmerpenguins::path_to_file(file_name) %>%
        readr::read_csv(
          .,
          show_col_types = FALSE) %>%
        janitor::clean_names() %>%
        return()
    }

    fit_model <- function(data_source) {
      stats::glm(
        culmen_length_mm ~ culmen_depth_mm,
        data = data_source,
        family = stats::Gamma(link = "log")
      ) %>%
        return()
    }

    plot_results <- function(model) {
      ggplot2::fortify(model) %>%
        ggplot2::ggplot(
          mapping = ggplot2::aes(
            x = culmen_depth_mm,
            y = culmen_length_mm
          )
        ) +
        ggplot2::geom_point() +
        ggplot2::geom_line(
          mapping = ggplot2::aes(
            y = .fitted
          ),
          col = "red"
        ) %>%
        return()
    }

    list(
      targets::tar_target(
        name = "data_penguins_clean",
        command = load_and_clean_data("penguins_raw.csv")
      ),
      targets::tar_target(
        name = "mod_penguins",
        command = fit_model(data_penguins_clean)
      ),
      targets::tar_target(
        name = "fig_penguins",
        command = plot_results(mod_penguins)
      )
    )
  },
  ask = FALSE
)

targets::tar_visnetwork(
   script = temp_script
   )
```
:::

## Example pipeline - using {targets} 

```{r}
#| label: targets_ex_pipeline_6
#| echo: true
#| eval: false
targets::tar_make()
```

```{r}
#| label: targets_ex_pipeline_6_real
#| echo: false
#| eval: true
#| output: true
targets::tar_make(
  script = temp_script
)
```

::: {.fragment}
```{r}
#| label: targets_ex_pipeline_7
#| echo: true
#| eval: false
targets::tar_visnetwork()
```

```{r}
#| label: targets_ex_pipeline_7_real
#| echo: false
#| eval: true
#| output: true
targets::tar_visnetwork(
   script = temp_script
     )
```
:::

## [Practical Exercise]{.r-fit-text} {.exercise .textcenter}

:::{.r-fit-text}
1. What are your experiences with {targets} package?
2. Compare the pipeline with script-based aproach.
:::

`r countdown(minutes = 3)`

# [Literate programming - WIP]{.bold .r-fit-text} {.title}

## Literate programming

```{r}
#| label: documentation
include_local_figure("documentation.jpg")
```

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

## Literate programming

```{r}
#| label: Pandoc
include_local_figure("Pandoc.jpg")
```

::: footer
[This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence](https://zenodo.org/doi/10.5281/zenodo.3332807)
:::

## Literate programming

```{r}
#| label: rmarkdown
include_local_figure("rmarkdown.png")
```

::: footer
Artwork by [@allison_horst](https://twitter.com/allison_horst)
:::

# [Outro]{.bold .r-fit-text} {.title}

## About me

:::: {.columns}

::: {.column width="25%"}
```{r}
#| label: personal sticker
include_local_figure("Ondrej_Mottl-transparent-shadow.png")
```

```{r}
#| label: linktree QR
include_local_figure("qr_linktree.png")
```
:::

::: {.column width="10%"}
:::

::: {.column width="62%"}
[Ondřej Mottl]{.bold .r-fit-text .text-color-primary}
Assistant Professor at [Charles University](https://cuni.cz/UK-1.html)
<br>

* 📧 Ondrej.mottl(at)gmail.com
* 🐦 [@OndrejMottl](https://twitter.com/OndrejMottl)
* 🐱 [Github](https://github.com/OndrejMottl)
* 🆔 [ORCID](https://orcid.org/0000-0002-9796-5081)
* 🌐 [Personal webpage](https://ondrejmottl.github.io/)
* 🧑‍💻 [Laboratory of Quantitative Ecology](https://ondrejmottl.github.io/lab/about_the_lab.html)
:::

::::

## [This presentation]{.bold .r-fit-text} {.title}

::: {.r-fit-text}
[😸 Code on GitHub](https://github.com/OndrejMottl/Presentation-OpenScience-master/)

[🖥️ Slides](https://ondrejmottl.github.io/Presentation-OpenScience-master/)
:::



